<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.1.1 (Build 505U)" ts="2017-02-08 17:17:35">
<Class name="Pierogi.Core">
<TimeChanged>64322,61356.083404</TimeChanged>
<TimeCreated>64322,54590.591663</TimeCreated>

<Method name="Describe">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ""
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Ensemble.Core">
<TimeChanged>64322,50260.004598</TimeChanged>
<TimeCreated>64322,50260.004598</TimeCreated>

<Method name="RunTimeInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,*pConfigName:%String,*pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set pConfigName = "", pClassName = ""
		Set pConfigName = $get(^Ens.Runtime("DispatchName",pTargetDispatchName))
		Set:pConfigName'="" pClassName =  $get(^Ens.Runtime("ConfigItem",pConfigName,"ClassName"))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="IsAService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tResult = $$$NO
	Try {
		Set class = ##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
		Set:($IsObject(class)&&($Find(class.Super,"Ens.BusinessService")>0)) tResult = $$$YES
	} Catch tException {
		Set tResult = $$$NO
	}
	Quit tResult
]]></Implementation>
</Method>

<Method name="Call">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, pOutput = ""
	Try {
		$$$THROWONERROR(tSC, ..RunTimeInfo(pTargetDispatchName, .pConfigName, .pClassname))
		Set:pClassname="" tSC = $$$ERROR(5002,pTargetDispatchName _ " Not Found")
		Throw:$$$ISERR(tSC)
		
		If ..IsAService(pClassname) {
			$$$THROWONERROR(tSC, ..CallWithBusinessService(pTargetDispatchName, pInput, .pOutput))
		} Else {
			$$$THROWONERROR(tSC, ..CallWithoutBusinessService(pTargetDispatchName, pInput, .pOutput))
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallWithBusinessService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(Ens.Director).CreateBusinessService(pTargetDispatchName,.tService))
		Do tService.ProcessInput(pInput,.pOutput)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallWithoutBusinessService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC,  ##Class(EnsLib.Testing.Service).SendTestRequest(pTargetDispatchName, pInput, .pOutput, .tSessionId, $$$YES))
		Set ^CacheTemp.EnsRuntimeAppData($Namespace,"EnsLib.Testing.Service",tSessionId,"start") = $ZDatetime($ztimestamp,3,,3)
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Ensemble">
<Super>Pierogi.Core,Pierogi.Ensemble.Core</Super>
<TimeChanged>64322,55592.813341</TimeChanged>
<TimeCreated>64322,55563.726751</TimeCreated>
</Class>


<Class name="Pierogi.Suite">
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64322,59149.589914</TimeChanged>
<TimeCreated>64322,58801.760167</TimeCreated>

<Method name="Package">
<Description>
Abstract method that should return the name of the package 
where the test cases are located.</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
</Method>

<Method name="Tests">
<Description><![CDATA[
Returns a list of test cases based on what is returned
from the <method>Package</method> class method.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do $system.OBJ.GetPackageList(.classList, ..Package())
	Set class = ""
	Set testList = ""
	
	For
	{
		Set class = $Order(classList(class))
		Quit:class=""
		
		If $$issubclassof^%occCompile(class,"%UnitTest.TestCase")
		   && '##class(%Dictionary.ClassDefinition).%OpenId(class).Abstract
		{
			If testList = ""
			{
				Set testList = class
			}
			Else
			{
				Set testList = testList_","_class
			}
		}	
	}
	
	Quit $ListFromString(testList)
]]></Implementation>
</Method>
</Class>
</Export>
