<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.1.1 (Build 505U)" ts="2017-02-10 15:02:09">
<Class name="Pierogi.Assert">
<Super>%SerialObject</Super>
<TimeChanged>64323,55311.57982</TimeChanged>
<TimeCreated>64322,62300.698768</TimeCreated>

<Property name="Number">
<Description>
The number of the assertion</Description>
<Type>%Integer</Type>
</Property>

<Property name="Ok">
<Description>
Whether the assertion passed or failed</Description>
<Type>%Boolean</Type>
</Property>

<Property name="Name">
<Description>
The Name of the assertion</Description>
<Type>%String</Type>
</Property>

<Property name="Msg">
<Description>
The Expectation message when it fails</Description>
<Type>%String</Type>
</Property>

<Property name="Expectation">
<Description>
The Expectation that this Assert belongs</Description>
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>pLastNumber:%Integer=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..Number = $Increment(pLastNumber)
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AssertState</State>
<StreamLocation>^Pierogi.AssertS</StreamLocation>
<Data name="AssertState">
<Value name="1">
<Value>Number</Value>
</Value>
<Value name="2">
<Value>Ok</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Msg</Value>
</Value>
<Value name="5">
<Value>Expectation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Pierogi.Assertions">
<Abstract>1</Abstract>
<TimeChanged>64323,62035.44875</TimeChanged>
<TimeCreated>64323,54295.847656</TimeCreated>

<Property name="Results">
<Type>Pierogi.Assert</Type>
<Collection>list</Collection>
</Property>

<Method name="True">
<Description>
Assert that value is true.</Description>
<FormalSpec>pValue:%Boolean</FormalSpec>
<Implementation><![CDATA[	Do ..Results.Insert(..Test(pValue,..Message("True",$Select(pValue="":"False",0:"False",1:"True"))))
]]></Implementation>
</Method>

<Method name="False">
<Description>
Assert that value is false.</Description>
<FormalSpec>pValue:%Boolean</FormalSpec>
<Implementation><![CDATA[	Do ..Results.Insert(..Test('pValue, ..Message("False",$Select(pValue="":"True",0:"True",1:"False"))))
]]></Implementation>
</Method>

<Method name="Ok">
<Description>
Assert that status is OK</Description>
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[
	Set st="Status OK", actual = st
	Set:$$$ISERR(pValue) actual = $System.Status.GetErrorText(pValue)
	Do ..Results.Insert(..Test($$$ISOK(pValue), ..Message(st, actual)))
]]></Implementation>
</Method>

<Method name="NotOk">
<Description>
Assert that status is Not OK</Description>
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[
	Set st="Status Not OK", actual = st
	Set:$$$ISOK(pValue) actual = "Status OK"
	Do ..Results.Insert(..Test($$$ISERR(pValue), ..Message(st, actual)))
]]></Implementation>
</Method>

<Method name="Message">
<ClassMethod>1</ClassMethod>
<FormalSpec>pExpected="",pGot="",pBR=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pBR="" pBR = " "
	Quit "Expected: " _ $Get(pExpected) _ pBR _"Actual: "_$Get(pGot)
]]></Implementation>
</Method>

<Method name="Test">
<FormalSpec>pResult:%Boolean=0,pMessage:%String</FormalSpec>
<Private>1</Private>
<ReturnType>Pierogi.Assert</ReturnType>
<Implementation><![CDATA[
	Set tAssert = ##class(Pierogi.Assert).%New( ..Results.Count() ), 
		tAssert.Ok = pResult
	Set:tAssert.Ok=$$$YES tAssert.Msg = pMessage
	
	Quit tAssert
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Ensemble.Core">
<TimeChanged>64322,50260.004598</TimeChanged>
<TimeCreated>64322,50260.004598</TimeCreated>

<Method name="RunTimeInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,*pConfigName:%String,*pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set pConfigName = "", pClassName = ""
		Set pConfigName = $get(^Ens.Runtime("DispatchName",pTargetDispatchName))
		Set:pConfigName'="" pClassName =  $get(^Ens.Runtime("ConfigItem",pConfigName,"ClassName"))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="IsAService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tResult = $$$NO
	Try {
		Set class = ##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
		Set:($IsObject(class)&&($Find(class.Super,"Ens.BusinessService")>0)) tResult = $$$YES
	} Catch tException {
		Set tResult = $$$NO
	}
	Quit tResult
]]></Implementation>
</Method>

<Method name="Call">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, pOutput = ""
	Try {
		$$$THROWONERROR(tSC, ..RunTimeInfo(pTargetDispatchName, .pConfigName, .pClassname))
		Set:pClassname="" tSC = $$$ERROR(5002,pTargetDispatchName _ " Not Found")
		Throw:$$$ISERR(tSC)
		
		If ..IsAService(pClassname) {
			$$$THROWONERROR(tSC, ..CallWithBusinessService(pTargetDispatchName, pInput, .pOutput))
		} Else {
			$$$THROWONERROR(tSC, ..CallWithoutBusinessService(pTargetDispatchName, pInput, .pOutput))
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallWithBusinessService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(Ens.Director).CreateBusinessService(pTargetDispatchName,.tService))
		Do tService.ProcessInput(pInput,.pOutput)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallWithoutBusinessService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC,  ##Class(EnsLib.Testing.Service).SendTestRequest(pTargetDispatchName, pInput, .pOutput, .tSessionId, $$$YES))
		Set ^CacheTemp.EnsRuntimeAppData($Namespace,"EnsLib.Testing.Service",tSessionId,"start") = $ZDatetime($ztimestamp,3,,3)
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Ensemble">
<Super>Pierogi.Core,Pierogi.Ensemble.Core</Super>
<TimeChanged>64322,55592.813341</TimeChanged>
<TimeCreated>64322,55563.726751</TimeCreated>
</Class>


<Class name="Pierogi.Expectations">
<Super>%RegisteredObject,Pierogi.Assertions</Super>
<TimeChanged>64324,30647.803428</TimeChanged>
<TimeCreated>64323,53940.164625</TimeCreated>
</Class>


<Class name="Pierogi.Spec">
<Super>Pierogi.Expectations</Super>
<TimeChanged>64324,35727.106193</TimeChanged>
<TimeCreated>64324,33238.095575</TimeCreated>

<Property name="Method">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="Description">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="Describe">
<FormalSpec>pContent:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ..Description = pContent
	Quit pContent
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Suite">
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64324,53499.55219</TimeChanged>
<TimeCreated>64322,58801.760167</TimeCreated>

<Method name="Package">
<Description>
Abstract method that should return the name of the package 
where the test cases are located.</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ""
]]></Implementation>
</Method>

<Method name="Specs">
<Description><![CDATA[
Returns a list of specs and tests cases based on what is returned
from the <method>Package</method> class method.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do $system.OBJ.GetPackageList(.classList, ..Package())
	Set class = $Order(classList(""))
	Set testList = ""
	
	While class'="" {
		Set:($$issubclassof^%occCompile(class,"Pierogi.Spec")
		   && '##class(%Dictionary.ClassDefinition).%OpenId(class).Abstract) $List(testList, *+1) = class
			
		Set class = $Order(classList(class))
	}
	
	Quit testList
]]></Implementation>
</Method>

<Method name="SpecTests">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassname:%String,*pTests</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		
		Set pTests="",
			tSql = "Select Name from %Dictionary.MethodDefinition " _
				" Where parent = ? " _
				" AND ( Name %StartsWith 'Should' OR  Name %StartsWith 'Test') " _
				" Order by SequenceNumber ",
			tStatement =  ##class(%SQL.Statement).%New()
			
		$$$THROWONERROR(tSC, tStatement.%Prepare(tSql))
		Set tRS = tStatement.execute(pClassname)
		
		While tRS.%Next() {
			Set $List(pTests, *+1) = tRS.%Get("Name")
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>
</Export>
