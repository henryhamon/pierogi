<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for Windows (x86-32) 2015.1.1 (Build 505U)" ts="2017-02-13 16:33:31">
<Class name="Pierogi.Assert">
<Super>%SerialObject</Super>
<TimeChanged>64323,55311.57982</TimeChanged>
<TimeCreated>64322,62300.698768</TimeCreated>

<Property name="Number">
<Description>
The number of the assertion</Description>
<Type>%Integer</Type>
</Property>

<Property name="Ok">
<Description>
Whether the assertion passed or failed</Description>
<Type>%Boolean</Type>
</Property>

<Property name="Name">
<Description>
The Name of the assertion</Description>
<Type>%String</Type>
</Property>

<Property name="Msg">
<Description>
The Expectation message when it fails</Description>
<Type>%String</Type>
</Property>

<Property name="Expectation">
<Description>
The Expectation that this Assert belongs</Description>
<Type>%String</Type>
</Property>

<Method name="%OnNew">
<FormalSpec>pLastNumber:%Integer=0</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..Number = $Increment(pLastNumber)
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>AssertState</State>
<StreamLocation>^Pierogi.AssertS</StreamLocation>
<Data name="AssertState">
<Value name="1">
<Value>Number</Value>
</Value>
<Value name="2">
<Value>Ok</Value>
</Value>
<Value name="3">
<Value>Name</Value>
</Value>
<Value name="4">
<Value>Msg</Value>
</Value>
<Value name="5">
<Value>Expectation</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Pierogi.Assertions">
<Abstract>1</Abstract>
<TimeChanged>64327,59356.715725</TimeChanged>
<TimeCreated>64323,54295.847656</TimeCreated>

<Property name="Status">
<Type>%String</Type>
<Internal>1</Internal>
<InitialExpression>"succeed"</InitialExpression>
</Property>

<Property name="Results">
<Type>Pierogi.Assert</Type>
<Collection>list</Collection>
</Property>

<Property name="Fails">
<Type>Pierogi.Assert</Type>
<Collection>list</Collection>
</Property>

<Method name="True">
<Description>
Assert that value is true.</Description>
<FormalSpec>pValue:%Boolean</FormalSpec>
<Implementation><![CDATA[	Do ..Results.Insert(..Test("True", pValue,..Message("True",$Select(pValue="":"False",0:"False",1:"True"))))
]]></Implementation>
</Method>

<Method name="False">
<Description>
Assert that value is false.</Description>
<FormalSpec>pValue:%Boolean</FormalSpec>
<Implementation><![CDATA[	Do ..Results.Insert(..Test("False", 'pValue, ..Message("False",$Select(pValue="":"True",0:"True",1:"False"))))
]]></Implementation>
</Method>

<Method name="Ok">
<Description>
Assert that status is OK</Description>
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[
	Set st="Status OK", actual = st
	Set:$$$ISERR(pValue) actual = $System.Status.GetErrorText(pValue)
	Do ..Results.Insert(..Test("Ok", $$$ISOK(pValue), ..Message(st, actual)))
]]></Implementation>
</Method>

<Method name="NotOk">
<Description>
Assert that status is Not OK</Description>
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[
	Set st="Status Not OK", actual = st
	Set:$$$ISOK(pValue) actual = "Status OK"
	Do ..Results.Insert(..Test("NotOk", $$$ISERR(pValue), ..Message(st, actual)))
]]></Implementation>
</Method>

<Method name="Message">
<ClassMethod>1</ClassMethod>
<FormalSpec>pExpected="",pGot="",pBR=""</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pBR="" pBR = " "
	Quit "Expected: " _ $Get(pExpected) _ pBR _"Actual: "_$Get(pGot)
]]></Implementation>
</Method>

<Method name="Test">
<FormalSpec>pName:%String,pResult:%Boolean=0,pMessage:%String</FormalSpec>
<Private>1</Private>
<ReturnType>Pierogi.Assert</ReturnType>
<Implementation><![CDATA[
	Set tAssert = ##class(Pierogi.Assert).%New( ..Results.Count() ), 
		tAssert.Ok = pResult, 
		tAssert.Name = pName
	If tAssert.Ok=$$$NO {
		Set tAssert.Msg = pMessage,
			..Status = "fail"
		
		Do ..Fails.Insert(tAssert) // Temporary solution TODO: must refactor
	}
	
	Quit tAssert
]]></Implementation>
</Method>

<Method name="Status">
<Implementation><![CDATA[	Quit ..Status
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Ensemble.Core">
<TimeChanged>64322,50260.004598</TimeChanged>
<TimeCreated>64322,50260.004598</TimeCreated>

<Method name="RunTimeInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,*pConfigName:%String,*pClassName:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set pConfigName = "", pClassName = ""
		Set pConfigName = $get(^Ens.Runtime("DispatchName",pTargetDispatchName))
		Set:pConfigName'="" pClassName =  $get(^Ens.Runtime("ConfigItem",pConfigName,"ClassName"))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="IsAService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String</FormalSpec>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[
	Set tResult = $$$NO
	Try {
		Set class = ##class(%Dictionary.ClassDefinition).%OpenId(pClassName)
		Set:($IsObject(class)&&($Find(class.Super,"Ens.BusinessService")>0)) tResult = $$$YES
	} Catch tException {
		Set tResult = $$$NO
	}
	Quit tResult
]]></Implementation>
</Method>

<Method name="Call">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, pOutput = ""
	Try {
		$$$THROWONERROR(tSC, ..RunTimeInfo(pTargetDispatchName, .pConfigName, .pClassname))
		Set:pClassname="" tSC = $$$ERROR(5002,pTargetDispatchName _ " Not Found")
		Throw:$$$ISERR(tSC)
		
		If ..IsAService(pClassname) {
			$$$THROWONERROR(tSC, ..CallWithBusinessService(pTargetDispatchName, pInput, .pOutput))
		} Else {
			$$$THROWONERROR(tSC, ..CallWithoutBusinessService(pTargetDispatchName, pInput, .pOutput))
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallWithBusinessService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ##class(Ens.Director).CreateBusinessService(pTargetDispatchName,.tService))
		Do tService.ProcessInput(pInput,.pOutput)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="CallWithoutBusinessService">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTargetDispatchName:%String,pInput:%RegisteredObject,*pOutput:%RegisteredObject=""</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC,  ##Class(EnsLib.Testing.Service).SendTestRequest(pTargetDispatchName, pInput, .pOutput, .tSessionId, $$$YES))
		Set ^CacheTemp.EnsRuntimeAppData($Namespace,"EnsLib.Testing.Service",tSessionId,"start") = $ZDatetime($ztimestamp,3,,3)
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="Pierogi.Ensemble">
<Super>Pierogi.Core,Pierogi.Ensemble.Core</Super>
<TimeChanged>64322,55592.813341</TimeChanged>
<TimeCreated>64322,55563.726751</TimeCreated>
</Class>


<Class name="Pierogi.Expectations">
<Super>%RegisteredObject,Pierogi.Assertions</Super>
<TimeChanged>64324,30647.803428</TimeChanged>
<TimeCreated>64323,53940.164625</TimeCreated>
</Class>




<Class name="Pierogi.Results">
<Super>%SerialObject</Super>
<TimeChanged>64327,58947.334268</TimeChanged>
<TimeCreated>64324,54759.739853</TimeCreated>

<Property name="Pass">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="Fail">
<Type>%Integer</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="All">
<Type>%ArrayOfDataTypes</Type>
</Property>

<Property name="Status">
<Type>%Status</Type>
</Property>

<Method name="Tests">
<ReturnType>%Integer</ReturnType>
<Implementation><![CDATA[	Quit ..Pass + ..Fail
]]></Implementation>
</Method>

<Method name="Add">
<FormalSpec>pStatus:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set:pStatus="fail" ..Fail = ..Fail + 1
		Set:pStatus="succeed" ..Pass = ..Pass + 1
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheSerialState</Type>
<State>ResultsState</State>
<StreamLocation>^Pierogi.ResultsS</StreamLocation>
<Data name="ResultsState">
<Value name="1">
<Value>All</Value>
</Value>
<Value name="2">
<Value>Pass</Value>
</Value>
<Value name="3">
<Value>Fail</Value>
</Value>
<Value name="4">
<Value>Test</Value>
</Value>
<Value name="5">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Pierogi.Spec">
<Super>Pierogi.Expectations</Super>
<TimeChanged>64324,62427.622736</TimeChanged>
<TimeCreated>64324,33238.095575</TimeCreated>

<Property name="Method">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Property name="Description">
<Type>%String</Type>
<Private>1</Private>
</Property>

<Method name="Describe">
<FormalSpec>pContent:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set ..Description = pContent
	Quit pContent
]]></Implementation>
</Method>

<Method name="BeforeSetup">
</Method>

<Method name="Before">
</Method>

<Method name="After">
</Method>

<Method name="AfterSetup">
</Method>
</Class>


<Class name="Pierogi.Suite">
<Abstract>1</Abstract>
<Super>%RegisteredObject</Super>
<TimeChanged>64327,59336.142731</TimeChanged>
<TimeCreated>64322,58801.760167</TimeCreated>

<Property name="Terminal">
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
<Private>1</Private>
</Property>

<Method name="Package">
<Description>
Abstract method that should return the name of the package 
where the test cases are located.</Description>
<Abstract>1</Abstract>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ""
]]></Implementation>
</Method>

<Method name="Specs">
<Description><![CDATA[
Returns a list of specs and tests cases based on what is returned
from the <method>Package</method> class method.]]></Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Do $system.OBJ.GetPackageList(.classList, ..Package())
	Set class = $Order(classList(""))
	Set testList = ""
	
	While class'="" {
		Set:($$issubclassof^%occCompile(class,"Pierogi.Spec")
		   && '##class(%Dictionary.ClassDefinition).%OpenId(class).Abstract) $List(testList, *+1) = class
			
		Set class = $Order(classList(class))
	}
	
	Quit testList
]]></Implementation>
</Method>

<Method name="SpecTests">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassname:%String,*pTests</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set pTests="",
			tSql = "Select Name from %Dictionary.MethodDefinition " _
				" Where parent = ? " _
				" AND ( Name %StartsWith 'Should' OR  Name %StartsWith 'Test') " _
				" Order by SequenceNumber ",
			tStatement =  ##class(%SQL.Statement).%New()
			
		$$$THROWONERROR(tSC, tStatement.%Prepare(tSql))
		Set tRS = tStatement.execute(pClassname)
		
		While tRS.%Next() {
			Set $List(pTests, *+1) = tRS.%Get("Name")
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<ReturnType>Pierogi.Results</ReturnType>
<Implementation><![CDATA[
	Set tResults = ##class(Pierogi.Results).%New()
	Try {
		Set tResults.Status = $$$OK
		
		Set specsClass = ..Specs(), idx = 1
		While (( idx > 0) && (idx <= $ListLength(specsClass))){
			
			$$$THROWONERROR(tSC, ..RunTest($List(specsClass,idx), .tResults))
			
			Set idx = $Increment(idx)
		}
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		Set tResults.Status = tSC
	}
	Quit tResults
]]></Implementation>
</Method>

<Method name="RunTest">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pClass:%String,&pResults:Pierogi.Results]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set class = $ClassMethod(pClass,"%New")
		#Dim class As Pierogi.Spec
		$$$THROWONERROR(tSC, ..SpecTests(pClass, .specs))
		/*
		If ..Terminal=$$$YES {
			Do ..TerminalCls(),
			   ..TerminalClass(pClass)
		}
		*/
		// LifeCycle
		Do class.BeforeSetup()
		// For Each Test
		For k=1:1:$ListLength(specs){
			Set test = $List(specs,k)

			Do class.Before()
			
			$$$THROWONERROR(tSC, class.Results.Clear())
			Do $Method(class, test)
			S ^CacheTemp.ham($I(^CacheTemp.ham),"status") = class.Status
			$$$THROWONERROR(tSC, pResults.Add(class.Status))
			
			/*
			If ="fail" {
				;Do:..Terminal ..TerminalPrintFail()
				Write:'..Terminal "F"
				Set pResults.Fail = $G(pResults.Fail) + 1
			} 
			If class.Status="succeed"  {
				;Do:..Terminal ..TerminalPrintPass()
				Write:'..Terminal "."
				Set pResults.Pass = $G(pResults.Pass) + 1
			}
			*/
			Do class.After()
		}
		
		Do class.AfterSetup()
	
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		S ^CacheTemp.ham($I(^CacheTemp.ham),"treta forte") = $System.Status.GetErrorText(tSC)
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="TerminalCls">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Write #,!,*12
]]></Implementation>
</Method>

<Method name="TerminalClass">
<ClassMethod>1</ClassMethod>
<FormalSpec>pClassName:%String</FormalSpec>
<Implementation><![CDATA[	Write *27,"[0m",pClassName,*27,"[0m",!
]]></Implementation>
</Method>

<Method name="TerminalPrintPass">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Write *27,"[32m",".",*27,"[0m"
]]></Implementation>
</Method>

<Method name="TerminalPrintFail">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Write *27,"[31m","F",*27,"[0m"
]]></Implementation>
</Method>

<Method name="TerminalResume">
<ClassMethod>1</ClassMethod>
</Method>
</Class>




<Class name="PierogiTests.Pierogi.Ensemble.Core">
<Super>%UnitTest.TestCase,PierogiTests.Pierogi.Helper</Super>
<TimeChanged>64322,61689.215016</TimeChanged>
<TimeCreated>64322,51068.437099</TimeCreated>

<Method name="OnBeforeAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Do ##class(SamplePrj.PierogiDelivery.Data.Order).%KillExtent()
		Do ##class(SamplePrj.PierogiDelivery.Data.Clients).%KillExtent()
		Do ##class(SamplePrj.PierogiDelivery.Data.Flavors).%KillExtent()
		Do ##class(SamplePrj.PierogiDelivery.Data.Clients).Populate(10)
		Do ##class(SamplePrj.PierogiDelivery.Data.Flavors).Seeds()
		
		OPEN 1
		USE 1
			Do ##class(Ens.Director).StopProduction()
			Do ##class(Ens.Director).StartProduction()
		CLOSE 1
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="OnAfterAllTests">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	OPEN 1
	USE 1
		Do ##class(Ens.Director).StopProduction()
	CLOSE 1
	Quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Auxiliary -------------------------------------------------------------------------------------------

]]></Content>
</UDLText>

<Method name="ClientsList">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tOutput = ""
	Try {
		
		Set tSql = "Select ID as Client FROM SamplePrj_PierogiDelivery_Data.Clients ",
			tStatement =  ##class(%SQL.Statement).%New()
		$$$THROWONERROR(tSC, tStatement.%Prepare(tSql))
		
		Set tRS = tStatement.execute()
		
		While tRS.%Next() {
			Set $List(tOutput, *+1) = tRS.%Get("Client")
		}
		
		Set tOutput = $ListToString(tOutput,",")
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tOutput
]]></Implementation>
</Method>

<Method name="FlavorList">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set tOutput = ""
	Try {
		
		Set tSql = "Select Name As Flavor FROM SamplePrj_PierogiDelivery_Data.Flavors ",
			tStatement =  ##class(%SQL.Statement).%New()
		$$$THROWONERROR(tSC, tStatement.%Prepare(tSql))
		
		Set tRS = tStatement.execute()
		
		While tRS.%Next() {
			Set $List(tOutput, *+1) = tRS.%Get("Flavor")
		}
		
		Set tOutput = $ListToString(tOutput,",")
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tOutput
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Factories --------------------------------------------------------------------------------------------

]]></Content>
</UDLText>

<Method name="ServiceOrderFactory">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClient:SamplePrj.PierogiDelivery.Data.Clients="",*pFlavor=""</FormalSpec>
<ReturnType>SamplePrj.PierogiDelivery.Service.Order.Req</ReturnType>
<Implementation><![CDATA[
	Set tfactory = ##class(SamplePrj.PierogiDelivery.Service.Order.Req).%New()
	
	Set tClients = $ListFromString(..ClientsList(),",")
	Set randomClient = ##class(SamplePrj.PierogiDelivery.Data.Clients).%OpenId($List(tClients, $Random($ListLength(tClients)) + 1))
	
	Set tFlavors = $ListFromString(..FlavorList(),",")
	Set randomFlavor = $List(tFlavors, $Random($ListLength(tFlavors)) + 1)
	
	Set tfactory.ClientCity 	= randomClient.City,
		tfactory.ClientName 	= randomClient.Name, 
		tfactory.ClientStreet 	= randomClient.Street, 
		tfactory.PierogiFlavor	= randomFlavor,
		tfactory.Quantity		= $Random(999)
		
	Set pClient = randomClient
	Set pFlavor = randomFlavor
	
	Quit tfactory
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Tests Specs ------------------------------------------------------------------------------------------

]]></Content>
</UDLText>

<Method name="TestGetRunTimeInfo">
<Implementation><![CDATA[
	Do ..ItShouldBeOk(##class(Pierogi.Ensemble.Core).RunTimeInfo("bsOrder",.tConfigName,.tClassName))
	Do ..ItShouldBeEqual(tConfigName,"bsOrder")
	Do ..ItShouldBeEqual(tClassName,"SamplePrj.PierogiDelivery.Service.Order")
]]></Implementation>
</Method>

<Method name="TestInvalidEnsembleObject">
<Implementation><![CDATA[
	Do ..ItShouldBeOk(##class(Pierogi.Ensemble.Core).RunTimeInfo("businessServiceInvalidName",.tConfigName,.tClassName))
	Do ..ItShouldBeEqual(tConfigName,"")
	Do ..ItShouldBeEqual(tClassName,"")
]]></Implementation>
</Method>

<Method name="TestIfIsABusinessService">
<Implementation><![CDATA[
	Do ..ItShouldBeTrue(##class(Pierogi.Ensemble.Core).IsAService("SamplePrj.PierogiDelivery.Service.Order"))
	Do ..ItShouldBeFalse(##class(Pierogi.Ensemble.Core).IsAService("SamplePrj.PierogiDelivery.Service.Invalid"))
	Do ..ItShouldBeFalse(##class(Pierogi.Ensemble.Core).IsAService("SamplePrj.PierogiDelivery.Operation.Client"))
]]></Implementation>
</Method>

<Method name="TestCallBusinessService">
<Implementation><![CDATA[
	Set tClients = $ListFromString(..ClientsList(),","),
		randomClient = ##class(SamplePrj.PierogiDelivery.Data.Clients).%OpenId($List(tClients, $Random($ListLength(tClients)) + 1)),
		request = ##class(SamplePrj.PierogiDelivery.Service.Client.Req).%New(),
		request.Name 	= randomClient.Name,
		request.City 	= randomClient.City,
		request.Street 	= randomClient.Street
		
	Do ..ItShouldBeOk(##class(Pierogi.Ensemble.Core).Call("bsClient", request, .response))
			
	Do ..ItShouldBeTrue($IsObject(response))
	Do ..ItShouldBeEqual(response.ClientId, randomClient.%Id())
]]></Implementation>
</Method>

<Method name="TestCallBusinessOperation">
<Implementation><![CDATA[
	Set tClients = $ListFromString(..ClientsList(),","),
		randomClient = ##class(SamplePrj.PierogiDelivery.Data.Clients).%OpenId($List(tClients, $Random($ListLength(tClients)) + 1)),
		request = ##class(SamplePrj.PierogiDelivery.Operation.Client.Req).%New(),
		request.Name 	= randomClient.Name,
		request.City 	= randomClient.City,
		request.Street 	= randomClient.Street
	
	Do ..ItShouldBeOk(##class(Pierogi.Ensemble.Core).Call("boClient", request, .response))
	
	#Dim response As SamplePrj.PierogiDelivery.Operation.Client.Resp
	Do ..ItShouldBeEqual(response.ClientId,randomClient.%Id())
]]></Implementation>
</Method>
</Class>


<Class name="PierogiTests.Pierogi.Expectations">
<Super>%UnitTest.TestCase,PierogiTests.Pierogi.Helper</Super>
<TimeChanged>64323,62129.72067</TimeChanged>
<TimeCreated>64323,60317.218879</TimeCreated>

<Method name="TestAssertIncrementNumber">
<Implementation><![CDATA[
	S assert1 = ##class(Pierogi.Assert).%New()
	D ..ItShouldBeEqual(assert1.Number,1)
	
	S assert2 = ##class(Pierogi.Assert).%New(1)
	D ..ItShouldBeEqual(assert2.Number,2)
]]></Implementation>
</Method>

<Method name="TestAssertTrue">
<Implementation><![CDATA[
	Set expectation = ##class(Pierogi.Expectations).%New()
	
	Do expectation.True($$$YES)
	Do ..ItShouldBeEqual(expectation.Results.Count(),1)
	Do ..ItShouldBeTrue(expectation.Results.GetAt(1).Ok)
	
	
	Do expectation.True($$$NO)
	Do ..ItShouldBeEqual(expectation.Results.Count(),2)
	Do ..ItShouldBeFalse(expectation.Results.GetAt(2).Ok)
]]></Implementation>
</Method>

<Method name="TestAssertFalse">
<Implementation><![CDATA[
	Set expectation = ##class(Pierogi.Expectations).%New()
	
	Do expectation.False($$$YES)
	Do ..ItShouldBeEqual(expectation.Results.Count(),1)
	Do ..ItShouldBeFalse(expectation.Results.GetAt(1).Ok)
	
	Do expectation.False($$$NO)
	Do ..ItShouldBeEqual(expectation.Results.Count(),2)
	Do ..ItShouldBeTrue(expectation.Results.GetAt(2).Ok)
]]></Implementation>
</Method>

<Method name="TestStatusOk">
<Implementation><![CDATA[
	Set expectation = ##class(Pierogi.Expectations).%New()
	
	Do expectation.Ok($$$OK)
	Do ..ItShouldBeEqual(expectation.Results.Count(),1)
	Do ..ItShouldBeTrue(expectation.Results.GetAt(1).Ok)
	
	Do expectation.Ok($$$ERROR(5002,"Oops!...I Did It Again"))
	Do ..ItShouldBeEqual(expectation.Results.Count(),2)
	Do ..ItShouldBeFalse(expectation.Results.GetAt(2).Ok)
]]></Implementation>
</Method>

<Method name="TestStatusNotOk">
<Implementation><![CDATA[
	Set expectation = ##class(Pierogi.Expectations).%New()
	
	Do expectation.NotOk($$$ERROR(5002,"Oops!...I Did It Again"))
	Do ..ItShouldBeEqual(expectation.Results.Count(),1)
	Do ..ItShouldBeTrue(expectation.Results.GetAt(1).Ok)
	
	Do expectation.NotOk($$$OK)
	Do ..ItShouldBeEqual(expectation.Results.Count(),2)
	Do ..ItShouldBeFalse(expectation.Results.GetAt(2).Ok)
]]></Implementation>
</Method>

<Method name="TestResult">
</Method>
</Class>


<Class name="PierogiTests.Pierogi.Helper">
<Super>%UnitTest.TestCase</Super>
<TimeChanged>64322,53332.127673</TimeChanged>
<TimeCreated>64322,53251.436969</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
// Asserts ----------------------------------------------------------------------------------------------

]]></Content>
</UDLText>

<Method name="ItShouldBeEqual">
<FormalSpec>pValue,pExpected</FormalSpec>
<Implementation><![CDATA[
	Set:$Get(pExpected)="" pExpected = "NULL"
	Set:$Get(pValue)="" pValue = "NULL"
	Do $$$AssertEquals(pValue, pExpected, "[Expected]: " _ pExpected _ " [Got]: "_pValue)
]]></Implementation>
</Method>

<Method name="ItShouldBeTrue">
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[	Do ..ItShouldBeEqual(pValue, $$$YES)
]]></Implementation>
</Method>

<Method name="ItShouldBeFalse">
<FormalSpec>pValue</FormalSpec>
<Implementation><![CDATA[	Do ..ItShouldBeEqual(pValue, $$$NO)
]]></Implementation>
</Method>

<Method name="ItShouldBeOk">
<FormalSpec>pStatus</FormalSpec>
<Implementation><![CDATA[
	Set descerr = "OK"
	Set:$$$ISERR(pStatus) descerr = $System.Status.GetErrorText(pStatus)
	Do $$$AssertStatusOK(pStatus, "[Expected]: OK [Got]: "_$Get(descerr))
]]></Implementation>
</Method>
</Class>


<Class name="PierogiTests.Pierogi.Suite">
<Super>%UnitTest.TestCase,PierogiTests.Pierogi.Helper</Super>
<TimeChanged>64327,58911.97517</TimeChanged>
<TimeCreated>64324,30757.305069</TimeCreated>

<Method name="TestPackageName">
<Implementation><![CDATA[	Do ..ItShouldBeEqual(##class(SampleTest.Suite).Package(),"SampleTest")
]]></Implementation>
</Method>

<Method name="TestSpecList">
<Implementation><![CDATA[
	Set specs = ##class(SampleTest.Suite).Specs()
	Do ..ItShouldBeEqual( $ListLength(specs), 2)
	Do ..ItShouldBeEqual( $List(specs,1), "SampleTest.spec01")
	Do ..ItShouldBeEqual( $List(specs,2), "SampleTest.spec02")
]]></Implementation>
</Method>

<Method name="TestListAllSpecMethods">
<Implementation><![CDATA[
	Set specClass = $List(##class(SampleTest.Suite).Specs(),1)
	Do ..ItShouldBeEqual( specClass, "SampleTest.spec01")
	Do ..ItShouldBeOk(##class(SampleTest.Suite).SpecTests(specClass, .tests))
	Do ..ItShouldBeEqual( $ListLength(tests), 2)
	Do ..ItShouldBeEqual( $List(tests, 1),"ShouldTestOne")
	Do ..ItShouldBeEqual( $List(tests, 2),"ShouldFail")
]]></Implementation>
</Method>

<Method name="TestRun">
<Implementation><![CDATA[
	#Dim results AS Pierogi.Results
	
	Set results = ##class(SampleTest.Suite).Run()
	Do ..ItShouldBeEqual($ClassName(results),"Pierogi.Results")
	Do ..ItShouldBeEqual(results.Tests(),2)
	Do ..ItShouldBeEqual(results.Pass,1)
	Do ..ItShouldBeEqual(results.Fail,1)
]]></Implementation>
</Method>
</Class>


<Class name="PierogiTests.Unit">
<TimeChanged>64321,38605.640324</TimeChanged>
<TimeCreated>64321,36923.252148</TimeCreated>

<Parameter name="Package">
<Default>PierogiTests.Pierogi</Default>
</Parameter>

<Method name="TempRoot">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[	Quit "C:\"
]]></Implementation>
</Method>

<Method name="Temp">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[	Quit "temp\"
]]></Implementation>
</Method>

<Method name="TempFileName">
<Description>
Abstract method that should return the temporary directory and filename 
to export the test package xml
Default value will be YearMonthDay_tests.xml</Description>
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZDate($Horolog,8)_"_tests"
]]></Implementation>
</Method>

<Method name="Export">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<Implementation><![CDATA[	Quit $System.OBJ.ExportPackage( ..#Package, ..TempRoot()_ ..Temp() _ ..TempFileName()_".xml")
]]></Implementation>
</Method>

<Method name="Run">
<ClassMethod>1</ClassMethod>
<FormalSpec>spec:%String=""</FormalSpec>
<Implementation><![CDATA[
	
	Set ^UnitTestRoot = ..TempRoot()
	Set tSC = ..Export()
	Quit:$$$ISERR(tSC) tSC
		
	Kill ^|$ZNSpace|UnitTestLog
	
	Set package = ..#Package
	
	Set suite = ..TempFileName() _":"_ package _spec 
	
	Quit ##class(%UnitTest.Manager).RunTest(..Temp(), "/noload/norecursive/nodelete")
]]></Implementation>
</Method>
</Class>




<Class name="SamplePrj.PierogiDelivery.Data.Clients">
<Super>%Persistent,%Populate</Super>
<TimeChanged>64327,59393.353727</TimeChanged>
<TimeCreated>64317,40075.374598</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Street">
<Type>%String</Type>
</Property>

<Property name="City">
<Type>%String</Type>
</Property>

<Property name="Orderes">
<Type>SamplePrj.PierogiDelivery.Data.Order</Type>
<Cardinality>children</Cardinality>
<Inverse>Client</Inverse>
<Relationship>1</Relationship>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SamplePrj.Pierogi5322.ClientsD</DataLocation>
<DefaultData>ClientsDefaultData</DefaultData>
<IdLocation>^SamplePrj.Pierogi5322.ClientsD</IdLocation>
<IndexLocation>^SamplePrj.Pierogi5322.ClientsI</IndexLocation>
<StreamLocation>^SamplePrj.Pierogi5322.ClientsS</StreamLocation>
<ExtentSize>10</ExtentSize>
<Data name="ClientsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Street</Value>
</Value>
<Value name="4">
<Value>City</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>100.0000%</Selectivity>
</Property>
<Property name="City">
<Selectivity>14.2857%</Selectivity>
</Property>
<Property name="Name">
<Selectivity>10.0000%</Selectivity>
</Property>
<Property name="Street">
<Selectivity>10.0000%</Selectivity>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Data.Flavors">
<Super>%Persistent</Super>
<TimeChanged>64327,50466.611252</TimeChanged>
<TimeCreated>64317,38590.488901</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Price">
<Type>%Numeric</Type>
</Property>

<Index name="FindName">
<Properties>Name</Properties>
<Unique>1</Unique>
</Index>

<Property name="Meals">
<Type>SamplePrj.PierogiDelivery.Data.Order</Type>
<Cardinality>many</Cardinality>
<Inverse>Pierogis</Inverse>
<Relationship>1</Relationship>
</Property>

<Method name="Seeds">
<Description><![CDATA[
Populating the Database with seeds. <br>
The method Seeds is a way of feeding default values easily and quickly to a fresh installation.<br>
<p>
Examples:
<p>
<pre>
		>> Do ##class(SamplePrj.PierogiDelivery.Data.Flavors).Seeds()
		>> Set flavor = ##class(SamplePrj.PierogiDelivery.Data.Flavors).%OpenId(1)
		>> Write flavor.Name 
		Duck & Pears
</pre>
<br>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		$$$THROWONERROR(tSC, ..%KillExtent())
		Set Flavors = $ListFromString("Duck & Pears;Sweet Potato;Savory Chuck Roast;Sauerkraut & Onion;Potato with Onion;Potato with Jalapeno Cheese;Ricotta with Spinach & Roasted Garlic;Farmer's Cheese with Onion & Chives;Buffalo Chicken;Cheesy & Spinach;Farmer's Cheese;Garlic, Smashed Potato;Potato & Cheddar;Potato, Cheddar & Bacon;Pulled Pork;Sauerkraut;Sauerkraut & Mushroom;Plum;Smoked, Ham, Sausage and Cheese;Mushroom;Bolognese;Smoked, chicken & Cheese;Chilli & Cheese;Sweet Cheese;Ruskie;Blueberries;Apples;Meat & Cheese;Bryndza Cheese;Schlutzkrapfen;Bacon",";")
		
		For k=1:1:$ListLength(Flavors){
			$$$THROWONERROR(tSC, ..%New($List(Flavors,k), ##class(cosFaker.Finance).Amount(3,14,,".")).%Save())
		}
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Method name="%OnNew">
<Description><![CDATA[
Create an object when pass parameters <br>
<example>
Do ##class(SamplePrj.PierogiDelivery.Data.Clients).%KillExtent()
Set flavor = ##class(SamplePrj.PierogiDelivery.Data.Flavors).%New("Pineapple",10)
Do flavor.%Save()
Write flavor.Price
; 10
</example>]]></Description>
<FormalSpec>pFlavorName:%String,pPrice:%Numeric</FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Set ..Name = pFlavorName,
		..Price = pPrice
	Quit $$$OK
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>^SamplePrj.Pierogi5322.FlavorsD</DataLocation>
<DefaultData>FlavorsDefaultData</DefaultData>
<IdLocation>^SamplePrj.Pierogi5322.FlavorsD</IdLocation>
<IndexLocation>^SamplePrj.Pierogi5322.FlavorsI</IndexLocation>
<StreamLocation>^SamplePrj.Pierogi5322.FlavorsS</StreamLocation>
<Data name="FlavorsDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Name</Value>
</Value>
<Value name="3">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Data.Order">
<Super>%Persistent</Super>
<TimeChanged>64320,53529.490336</TimeChanged>
<TimeCreated>64317,54182.301627</TimeCreated>

<Property name="OrderedAt">
<Type>%DateTime</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="TotalPrice">
<Type>%Numeric</Type>
</Property>

<Property name="Client">
<Type>SamplePrj.PierogiDelivery.Data.Clients</Type>
<Cardinality>parent</Cardinality>
<Inverse>Orderes</Inverse>
<Relationship>1</Relationship>
</Property>

<Property name="Pierogis">
<Type>SamplePrj.PierogiDelivery.Data.Flavors</Type>
<Cardinality>one</Cardinality>
<Inverse>Meals</Inverse>
<Relationship>1</Relationship>
</Property>

<Index name="PierogisIndex">
<Properties>Pierogis</Properties>
</Index>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DataLocation>{%%PARENT}("Orderes")</DataLocation>
<DefaultData>OrderDefaultData</DefaultData>
<IdLocation>^SamplePrj.Pierogi5322.ClientsC("Orderes")</IdLocation>
<IndexLocation>^SamplePrj.PierogiDe5322.OrderI</IndexLocation>
<StreamLocation>^SamplePrj.PierogiDe5322.OrderS</StreamLocation>
<Data name="OrderDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>Pierogis</Value>
</Value>
<Value name="3">
<Value>OrderedAt</Value>
</Value>
<Value name="4">
<Value>Quantity</Value>
</Value>
<Value name="5">
<Value>TotalPrice</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Pierogi">
<Super>Ens.Response</Super>
<TimeChanged>64320,38915.618149</TimeChanged>
<TimeCreated>64320,38915.391989</TimeCreated>

<Property name="FlavorId">
<Type>%String</Type>
</Property>

<Property name="Price">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PierogiDefaultData</DefaultData>
<Data name="PierogiDefaultData">
<Structure>listnode</Structure>
<Subscript>"Pierogi"</Subscript>
<Value name="1">
<Value>FlavorId</Value>
</Value>
<Value name="2">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Req.Client">
<Super>Ens.Request</Super>
<TimeChanged>64317,56041.66523</TimeChanged>
<TimeCreated>64317,55534.477193</TimeCreated>

<Property name="Name">
<Type>%String</Type>
</Property>

<Property name="Street">
<Type>%String</Type>
</Property>

<Property name="City">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ClientDefaultData</DefaultData>
<Data name="ClientDefaultData">
<Structure>listnode</Structure>
<Subscript>"Client"</Subscript>
<Value name="1">
<Value>Name</Value>
</Value>
<Value name="2">
<Value>Street</Value>
</Value>
<Value name="3">
<Value>City</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Req.Invoice">
<Super>Ens.Request</Super>
<TimeChanged>64320,38469.990975</TimeChanged>
<TimeCreated>64320,38469.72881</TimeCreated>

<Property name="Flavor">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>InvoiceDefaultData</DefaultData>
<Data name="InvoiceDefaultData">
<Structure>listnode</Structure>
<Subscript>"Invoice"</Subscript>
<Value name="1">
<Value>Flavor</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Req.Order">
<Super>Ens.Request</Super>
<TimeChanged>64317,56187.314408</TimeChanged>
<TimeCreated>64317,55172.568931</TimeCreated>

<Property name="ClientName">
<Type>%String</Type>
</Property>

<Property name="ClientStreet">
<Type>%String</Type>
</Property>

<Property name="ClientCity">
<Type>%String</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="PierogiFlavor">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>OrderDefaultData</DefaultData>
<Data name="OrderDefaultData">
<Structure>listnode</Structure>
<Subscript>"Order"</Subscript>
<Value name="1">
<Value>ClientName</Value>
</Value>
<Value name="2">
<Value>ClientStreet</Value>
</Value>
<Value name="3">
<Value>ClientCity</Value>
</Value>
<Value name="4">
<Value>Quantity</Value>
</Value>
<Value name="5">
<Value>PierogiFlavor</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Resp.Client">
<Super>Ens.Response</Super>
<TimeChanged>64317,55572.21927</TimeChanged>
<TimeCreated>64317,55571.970289</TimeCreated>

<Property name="ClientId">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ClientDefaultData</DefaultData>
<Data name="ClientDefaultData">
<Structure>listnode</Structure>
<Subscript>"Client"</Subscript>
<Value name="1">
<Value>ClientId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Resp.Invoice">
<Super>Ens.Response</Super>
<TimeChanged>64320,40730.520809</TimeChanged>
<TimeCreated>64320,39869.360611</TimeCreated>

<Property name="TotalPrice">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>InvoiceDefaultData</DefaultData>
<Data name="InvoiceDefaultData">
<Structure>listnode</Structure>
<Subscript>"Invoice"</Subscript>
<Value name="1">
<Value>TotalPrice</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Message.Resp.Pierogi">
<Super>Ens.Response</Super>
<TimeChanged>64320,40066.102191</TimeChanged>
<TimeCreated>64320,38915.391989</TimeCreated>

<Property name="FlavorId">
<Type>%String</Type>
</Property>

<Property name="Price">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>PierogiDefaultData</DefaultData>
<Data name="PierogiDefaultData">
<Subscript>"Pierogi"</Subscript>
<Value name="1">
<Value>FlavorId</Value>
</Value>
<Value name="2">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Checkout.Req">
<Super>Ens.Request</Super>
<TimeChanged>64320,53463.992662</TimeChanged>
<TimeCreated>64320,41263.980687</TimeCreated>

<Property name="ClientId">
<Type>%String</Type>
</Property>

<Property name="FlavorId">
<Type>%String</Type>
</Property>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="TotalPrice">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ReqDefaultData</DefaultData>
<Data name="ReqDefaultData">
<Subscript>"Req"</Subscript>
<Value name="1">
<Value>ClientId</Value>
</Value>
<Value name="2">
<Value>FlavorId</Value>
</Value>
<Value name="3">
<Value>Quantity</Value>
</Value>
<Value name="4">
<Value>TotalPrice</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Checkout.Resp">
<Super>Ens.Response</Super>
<TimeChanged>64320,55667.634036</TimeChanged>
<TimeCreated>64320,55193.718236</TimeCreated>

<Property name="OrderId">
<Type>%String</Type>
</Property>

<Property name="Status">
<Type>%Status</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RespDefaultData</DefaultData>
<Data name="RespDefaultData">
<Subscript>"Resp"</Subscript>
<Value name="1">
<Value>Status</Value>
</Value>
<Value name="2">
<Value>OrderId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Checkout">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64320,56945.633062</TimeChanged>
<TimeCreated>64320,41005.670125</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="ProcessOrder">
<FormalSpec>pInput:SamplePrj.PierogiDelivery.Operation.Checkout.Req,*pResponse:SamplePrj.PierogiDelivery.Operation.Checkout.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK, 
		pResponse = ##class(SamplePrj.PierogiDelivery.Operation.Checkout.Resp).%New()
		
	Try {
		Set tOrder = ##class(SamplePrj.PierogiDelivery.Data.Order).%New(), 
			tOrder.Quantity = pInput.Quantity, 
			tOrder.TotalPrice = pInput.TotalPrice,
			tOrder.OrderedAt = $ZDateTime($Horolog,3),
			tClient = ##class(SamplePrj.PierogiDelivery.Data.Clients).%OpenId(pInput.ClientId),
			tFlavor = ##class(SamplePrj.PierogiDelivery.Data.Flavors).%OpenId(pInput.FlavorId)
		
		$$$THROWONERROR(tSC, tClient.Orderes.Insert(tOrder))
		$$$THROWONERROR(tSC, tFlavor.Meals.Insert(tOrder))
		$$$THROWONERROR(tSC, tClient.%Save())
		$$$THROWONERROR(tSC, tFlavor.%Save())
		
		$$$THROWONERROR(tSC, tOrder.%Save())
		Set pResponse.OrderId = tOrder.%Id()
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Set pResponse.Status = tSC
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="SamplePrj.PierogiDelivery.Operation.Checkout.Req">
		<Method>ProcessOrder</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Client.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Client</Super>
<TimeChanged>64317,57319.956262</TimeChanged>
<TimeCreated>64317,57319.733301</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Client.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Client</Super>
<TimeChanged>64317,57389.317327</TimeChanged>
<TimeCreated>64317,57343.662826</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Client">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64320,35328.376094</TimeChanged>
<TimeCreated>64317,57264.217233</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Parameter name="ADAPTER">
<Default>EnsLib.SQL.OutboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>EnsLib.SQL.OutboundAdapter</Type>
</Property>

<Parameter name="SETTINGS">
<Default>ReplyCodeActions,RetryInterval,AlertRetryGracePeriod:Alerting,FailureTimeout,QueueCountAlert:Alerting</Default>
</Parameter>

<Method name="GetClientId">
<FormalSpec>pInput:SamplePrj.PierogiDelivery.Operation.Client.Req,*pResponse:SamplePrj.PierogiDelivery.Operation.Client.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	$$$TRACE("GetClient")
	Try {
		$$$TRACE(pInput.Name)
		Set pResponse = ##class(SamplePrj.PierogiDelivery.Operation.Client.Resp).%New()
		
		Set tSql = "Select TOP 1 ID as Client FROM SamplePrj_PierogiDelivery_Data.Clients "_
			" WHERE Name %StartsWith ? AND Street Like ? AND City = ?",
			tStatement =  ##class(%SQL.Statement).%New()
		$$$THROWONERROR(tSC, tStatement.%Prepare(tSql))
		
		Set tRS = tStatement.execute(pInput.Name, pInput.Street, pInput.City)
		
		$$$THROWONERROR(tSC, tRS.%Next())
		Set pResponse.ClientId = tRS.%Get("Client")
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="SamplePrj.PierogiDelivery.Operation.Client.Req">
		<Method>GetClientId</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Invoice.Req">
<Super>Ens.Request</Super>
<TimeChanged>64320,39728.162984</TimeChanged>
<TimeCreated>64320,39727.962338</TimeCreated>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Property name="Price">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ReqDefaultData</DefaultData>
<Data name="ReqDefaultData">
<Structure>listnode</Structure>
<Subscript>"Req"</Subscript>
<Value name="1">
<Value>Quantity</Value>
</Value>
<Value name="2">
<Value>Price</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Invoice.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Invoice</Super>
<TimeChanged>64320,40742.628437</TimeChanged>
<TimeCreated>64320,39869.360611</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Invoice">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64320,39930.146527</TimeChanged>
<TimeCreated>64320,36966.37239</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="GetTotal">
<FormalSpec>pInput:SamplePrj.PierogiDelivery.Operation.Invoice.Req,*pResponse:SamplePrj.PierogiDelivery.Operation.Invoice.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set pResponse = ##class(SamplePrj.PierogiDelivery.Operation.Invoice.Resp).%New(),
			pResponse.TotalPrice = pInput.Price * pInput.Quantity
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="SamplePrj.PierogiDelivery.Operation.Invoice.Req">
		<Method>GetTotal</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Price.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Invoice</Super>
<TimeChanged>64320,38497.387907</TimeChanged>
<TimeCreated>64320,37113.213415</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Price.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Pierogi</Super>
<TimeChanged>64320,38983.640637</TimeChanged>
<TimeCreated>64320,37127.107319</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RespDefaultData</DefaultData>
<Data name="RespDefaultData">
<Subscript>"Resp"</Subscript>
<Value name="1">
<Value>Price</Value>
</Value>
<Value name="2">
<Value>FlavorId</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Operation.Price">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>64320,37739.147423</TimeChanged>
<TimeCreated>64320,37001.009179</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="GetPrice">
<FormalSpec>pInput:SamplePrj.PierogiDelivery.Operation.Price.Req,*pResponse:SamplePrj.PierogiDelivery.Operation.Price.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
			Set tFlavor = ##class(SamplePrj.PierogiDelivery.Data.Flavors).FindNameOpen(pInput.Flavor),
				pResponse = ##class(SamplePrj.PierogiDelivery.Operation.Price.Resp).%New(),
				pResponse.Price = tFlavor.Price,
				pResponse.FlavorId = tFlavor.%Id()
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="SamplePrj.PierogiDelivery.Operation.Price.Req">
		<Method>GetPrice</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Client.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Client</Super>
<TimeChanged>64317,56148.034026</TimeChanged>
<TimeCreated>64317,56147.829597</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Client.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Client</Super>
<TimeChanged>64320,31666.356797</TimeChanged>
<TimeCreated>64320,31665.976287</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Client">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64320,35339.351005</TimeChanged>
<TimeCreated>64317,55993.654607</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:SamplePrj.PierogiDelivery.Process.Client.Req,*pResponse:SamplePrj.PierogiDelivery.Operation.Client.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set tClient = ##class(SamplePrj.PierogiDelivery.Operation.Client.Req).%New(),
			tClient.Name = pRequest.Name, 
			tClient.City = pRequest.City, 
			tClient.Street = pRequest.Street,
			pResponse = ##class(SamplePrj.PierogiDelivery.Operation.Client.Resp).%New()
		$$$THROWONERROR(tSC, tClient.%Save())
		$$$THROWONERROR(tSC, ..SendRequestSync("boClient", tClient, .pResponse))
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Invoice.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Invoice</Super>
<TimeChanged>64320,39579.968223</TimeChanged>
<TimeCreated>64320,38368.532022</TimeCreated>

<Property name="Quantity">
<Type>%Integer</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>ReqDefaultData</DefaultData>
<Data name="ReqDefaultData">
<Structure>listnode</Structure>
<Subscript>"Req"</Subscript>
<Value name="1">
<Value>Quantity</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Invoice.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Pierogi</Super>
<TimeChanged>64320,40123.718991</TimeChanged>
<TimeCreated>64320,40101.153922</TimeCreated>

<Property name="TotalPrice">
<Type>%Numeric</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RespDefaultData</DefaultData>
<Data name="RespDefaultData">
<Structure>listnode</Structure>
<Subscript>"Resp"</Subscript>
<Value name="1">
<Value>TotalPrice</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Invoice">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64320,49465.452972</TimeChanged>
<TimeCreated>64320,38210.138049</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:SamplePrj.PierogiDelivery.Process.Invoice.Req,*pResponse:SamplePrj.PierogiDelivery.Process.Invoice.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		Set pResponse = ##class(SamplePrj.PierogiDelivery.Process.Invoice.Resp).%New(),
			tPierogi = ##class(SamplePrj.PierogiDelivery.Operation.Price.Req).%New(),
			tPierogi.Flavor = pRequest.Flavor
			
		$$$THROWONERROR(tSC, ..SendRequestSync("boPrice", tPierogi, .pPierogi))
		
		Set tInvoice = ##class(SamplePrj.PierogiDelivery.Operation.Invoice.Req).%New(),
			tInvoice.Price = pPierogi.Price,
			tInvoice.Quantity = pRequest.Quantity
			
		$$$THROWONERROR(tSC, ..SendRequestSync("boInvoice", tInvoice, .pInvoice))
		
		Set pResponse.FlavorId = pPierogi.FlavorId, 
			pResponse.Price = pPierogi.Price, 
			pResponse.TotalPrice = pInvoice.TotalPrice
			
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Order.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Order</Super>
<TimeChanged>64317,56220.374516</TimeChanged>
<TimeCreated>64317,55224.098163</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Order.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Client,SamplePrj.PierogiDelivery.Message.Resp.Pierogi,SamplePrj.PierogiDelivery.Message.Resp.Invoice</Super>
<TimeChanged>64320,55609.376115</TimeChanged>
<TimeCreated>64320,40630.054621</TimeCreated>

<Property name="Status">
<Type>%Status</Type>
</Property>

<Property name="OrderId">
<Type>%String</Type>
</Property>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
<DefaultData>RespDefaultData</DefaultData>
<Data name="RespDefaultData">
<Subscript>"Resp"</Subscript>
<Value name="1">
<Value>TotalPrice</Value>
</Value>
<Value name="2">
<Value>FlavorId</Value>
</Value>
<Value name="3">
<Value>Price</Value>
</Value>
<Value name="4">
<Value>OrderId</Value>
</Value>
<Value name="5">
<Value>Status</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Process.Order">
<ClassType>persistent</ClassType>
<Super>Ens.BusinessProcess</Super>
<TimeChanged>64320,60758.70341</TimeChanged>
<TimeCreated>64317,55090.553299</TimeCreated>

<Method name="OnRequest">
<FormalSpec>pRequest:SamplePrj.PierogiDelivery.Process.Order.Req,*pResponse:SamplePrj.PierogiDelivery.Process.Order.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK,
		pResponse = ##class(SamplePrj.PierogiDelivery.Process.Order.Resp).%New()
		
	Try {
		Set tClient = ##class(SamplePrj.PierogiDelivery.Process.Client.Req).%New(), 
			tClient.City 		= pRequest.ClientCity, 
			tClient.Name 		= pRequest.ClientName, 
			tClient.Street 		= pRequest.ClientStreet, 
			tInvoice 			= ##class(SamplePrj.PierogiDelivery.Process.Invoice.Req).%New(),
			tInvoice.Quantity 	= pRequest.Quantity,
			tInvoice.Flavor 	= pRequest.PierogiFlavor
						
		$$$THROWONERROR(tSC, tClient.%Save())
		$$$THROWONERROR(tSC, tInvoice.%Save())
		
		$$$THROWONERROR(tSC, ..SendRequestSync("bpClient", tClient, .pClient))
		$$$THROWONERROR(tSC, ..SendRequestSync("bpInvoice", tInvoice, .pPierogi))
		
		Set tCheckout 			= ##class(SamplePrj.PierogiDelivery.Operation.Checkout.Req).%New(),
			tCheckout.ClientId 	= pClient.ClientId,
			tCheckout.FlavorId 	= pPierogi.FlavorId,
			tCheckout.Quantity 	= pRequest.Quantity,
			tCheckout.TotalPrice= pPierogi.TotalPrice
			
		$$$TRACE("going to Checkout")
		$$$THROWONERROR(tSC, ..SendRequestSync("boCheckout", tCheckout,.pResp))
		
		Set pResponse.Status 	= pResp.Status, 
			pResponse.OrderId 	= pResp.OrderId,
			pResponse.ClientId 	= pClient.ClientId,
			pResponse.FlavorId 	= pPierogi.FlavorId,
			pResponse.Price 	= pPierogi.Price,
			pResponse.TotalPrice= pPierogi.TotalPrice
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
		$$$TRACE("We Got Problems: "_ $System.Status.GetErrorText(tSC))
	}
	Quit tSC
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Production.System">
<Super>Ens.Production</Super>
<TimeChanged>64321,59700.74933</TimeChanged>
<TimeCreated>64317,55694.9316</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="SamplePrj.PierogiDelivery.Production.System" TestingEnabled="true" LogGeneralTraceEvents="false">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="bsOrder" Category="" ClassName="SamplePrj.PierogiDelivery.Service.Order" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="bpOrder" Category="Order" ClassName="SamplePrj.PierogiDelivery.Process.Order" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="bpClient" Category="Client" ClassName="SamplePrj.PierogiDelivery.Process.Client" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="boClient" Category="Client" ClassName="SamplePrj.PierogiDelivery.Operation.Client" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="boPrice" Category="Pierogi,Order" ClassName="SamplePrj.PierogiDelivery.Operation.Price" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="bpInvoice" Category="Order" ClassName="SamplePrj.PierogiDelivery.Process.Invoice" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="boCheckout" Category="Order" ClassName="SamplePrj.PierogiDelivery.Operation.Checkout" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="boInvoice" Category="Order" ClassName="SamplePrj.PierogiDelivery.Operation.Invoice" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
  <Item Name="bsClient" Category="Client" ClassName="SamplePrj.PierogiDelivery.Service.Client" PoolSize="0" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="SamplePrj.PierogiDelivery.Service.Client.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Client</Super>
<TimeChanged>64321,59303.799407</TimeChanged>
<TimeCreated>64321,59303.412644</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Service.Client.Resp">
<Super>SamplePrj.PierogiDelivery.Message.Resp.Client</Super>
<TimeChanged>64321,59334.829094</TimeChanged>
<TimeCreated>64321,59334.567347</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Service.Client">
<Super>Ens.BusinessService</Super>
<TimeChanged>64321,60185.57592</TimeChanged>
<TimeCreated>64321,59269.828189</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="OnProcessInput">
<FormalSpec>pInput:SamplePrj.PierogiDelivery.Service.Client.Req,*pOutput:SamplePrj.PierogiDelivery.Service.Client.Resp</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		
		Set tRequest 	= ##Class(SamplePrj.PierogiDelivery.Operation.Client.Req).%New(), 
			tRequest.Name 	= pInput.Name,
			tRequest.Street	= pInput.Street,
			tRequest.City 	= pInput.City,
			pOutput 	= ##class(SamplePrj.PierogiDelivery.Service.Client.Resp).%New()
		Set tSC = ..SendRequestSync("boClient", tRequest, .tResponse)
		
		#Dim tResponse As SamplePrj.PierogiDelivery.Operation.Client.Resp
		Set:$IsObject(tResponse) pOutput.ClientId = tResponse.ClientId
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>


<Class name="SamplePrj.PierogiDelivery.Service.Order.Req">
<Super>SamplePrj.PierogiDelivery.Message.Req.Order</Super>
<TimeChanged>64317,56266.485633</TimeChanged>
<TimeCreated>64317,52100.145881</TimeCreated>

<Storage name="Default">
<Type>%Library.CacheStorage</Type>
</Storage>
</Class>


<Class name="SamplePrj.PierogiDelivery.Service.Order">
<Super>Ens.BusinessService</Super>
<TimeChanged>64317,54957.592334</TimeChanged>
<TimeCreated>64317,51937.119728</TimeCreated>

<Parameter name="ADAPTER">
<Default>Ens.InboundAdapter</Default>
</Parameter>

<Property name="Adapter">
<Type>Ens.InboundAdapter</Type>
</Property>

<Method name="OnProcessInput">
<FormalSpec>pInput:SamplePrj.PierogiDelivery.Service.Order.Req,*pOutput:%RegisteredObject</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tSC = $$$OK
	Try {
		
		Set tRequest = ##Class(SamplePrj.PierogiDelivery.Service.Order.Req).%New(), 
			tRequest = pInput
		Set tSC = ..SendRequestAsync("bpOrder", tRequest, .pOutput)
		
	} Catch tException {
		Set:$$$ISOK(tSC) tSC = tException.AsStatus()
	}
	Quit tSC
]]></Implementation>
</Method>
</Class>




<Class name="SampleTest.Suite">
<Super>Pierogi.Suite</Super>
<TimeChanged>64324,31662.999242</TimeChanged>
<TimeCreated>64324,31597.383141</TimeCreated>

<Method name="Package">
<Description>
Abstract method that should return the name of the package 
where the test cases are located.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit "SampleTest"
]]></Implementation>
</Method>
</Class>


<Class name="SampleTest.spec01">
<Super>Pierogi.Spec</Super>
<TimeChanged>64324,49392.801291</TimeChanged>
<TimeCreated>64324,33494.648597</TimeCreated>

<Method name="CreateClient">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	Set client = ##class(SamplePrj.PierogiDelivery.Data.Clients).%New()
	Set client.Name = ##class(%PopulateUtils).Name()
	Set client.City = ##class(%PopulateUtils).City()
	Set client.Street = ##class(%PopulateUtils).Street()
	Do client.%Save()
]]></Implementation>
</Method>

<Method name="BeforeSetup">
<Implementation><![CDATA[	Do ##class(SamplePrj.PierogiDelivery.Data.Clients).%KillExtent()
]]></Implementation>
</Method>

<Method name="Before">
<Implementation><![CDATA[
	For k=1:1:2 {
		Do ..CreateClient()
	}
]]></Implementation>
</Method>

<Method name="After">
<Implementation><![CDATA[	Do ..CreateClient()
]]></Implementation>
</Method>

<Method name="AfterSetup">
<Implementation><![CDATA[	Do ##class(SamplePrj.PierogiDelivery.Data.Clients).%KillExtent()
]]></Implementation>
</Method>

<Method name="ShouldTestOne">
<Implementation><![CDATA[	Do ..Ok($$$OK)
]]></Implementation>
</Method>

<Method name="ShouldFail">
<Implementation><![CDATA[	Do ..NotOk($$$OK)
]]></Implementation>
</Method>
</Class>


<Class name="SampleTest.spec02">
<Super>Pierogi.Spec</Super>
<TimeChanged>64324,38085.636592</TimeChanged>
<TimeCreated>64324,33537.957742</TimeCreated>
</Class>


<Class name="cosFaker.Address">
<Super>%RegisteredObject</Super>
<TimeChanged>64037,48509.303778</TimeChanged>
<TimeCreated>64037,29468.065211</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*

 @method faker.address.latitude

  this.latitude = function () {
      return (faker.random.number(180 * 10000) / 10000.0 - 90.0).toFixed(4);
  }
   * @method faker.address.longitude

  this.longitude = function () {
      return (faker.random.number(360 * 10000) / 10000.0 - 180.0).toFixed(4);
  }
   this.city = function (format) {
    var formats = [
      '{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}',
      '{{address.cityPrefix}} {{name.firstName}}',
      '{{name.firstName}}{{address.citySuffix}}',
      '{{name.lastName}}{{address.citySuffix}}'
    ];

    if (typeof format !== "number") {
      format = faker.random.number(formats.length - 1);
    }

    return f(formats[format]);

  }

  **
   * Return a random localized city prefix
   * @method faker.address.cityPrefix
   *
  this.cityPrefix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_prefix);
  }

  **
   * Return a random localized city suffix
   *
   * @method faker.address.citySuffix
   *
  this.citySuffix = function () {
    return faker.random.arrayElement(faker.definitions.address.city_suffix);
  }

  **
   * Returns a random localized street name
   *
   * @method faker.address.streetName
   *
  this.streetName = function () {
      var result;
      var suffix = faker.address.streetSuffix();
      if (suffix !== "") {
          suffix = " " + suffix
      }

      switch (faker.random.number(1)) {
      case 0:
          result = faker.name.lastName() + suffix;
          break;
      case 1:
          result = faker.name.firstName() + suffix;
          break;
      }
      return result;
  }

  //
  // TODO: change all these methods that accept a boolean to instead accept an options hash.
  //
  **
   * Returns a random localized street address
   *
   * @method faker.address.streetAddress
   * @param {Boolean} useFullAddress
   *
  this.streetAddress = function (useFullAddress) {
      if (useFullAddress === undefined) { useFullAddress = false; }
      var address = "";
      switch (faker.random.number(2)) {
      case 0:
          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker.address.streetName();
          break;
      case 1:
          address = Helpers.replaceSymbolWithNumber("####") +  " " + faker.address.streetName();
          break;
      case 2:
          address = Helpers.replaceSymbolWithNumber("###") + " " + faker.address.streetName();
          break;
      }
      return useFullAddress ? (address + " " + faker.address.secondaryAddress()) : address;
  }

 **
   * streetSuffix
   *
   * @method faker.address.streetSuffix
   /
  this.streetSuffix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_suffix);
  }
  
 /**
   * streetPrefix
   *
   * @method faker.address.streetPrefix
   /
  this.streetPrefix = function () {
      return faker.random.arrayElement(faker.definitions.address.street_prefix);
  }

   * secondaryAddress
   *
   * @method faker.address.secondaryAddress
  this.secondaryAddress = function () {
      return Helpers.replaceSymbolWithNumber(faker.random.arrayElement(
          [
              'Apt. ###',
              'Suite ###'
          ]
      ));
  }


Centro Curitiba Lat -25.429 Lon -49.2671

*/
]]></Content>
</UDLText>

<Method name="StreetSuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $List($ListFromString("Doutor,,Marechal,Padre,,Almirante,General,Monsenhor,,Conselheiro",","),$Random(10)+1)
]]></Implementation>
</Method>

<Method name="StreetPrefix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $List($ListFromString("Rua,Avenida,Travessa,Ponte,Alameda,Marginal,Viela,Rodovia",","),$Random(8)+1)
]]></Implementation>
</Method>

<Method name="StreetName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S suffix = ..StreetSuffix()
	S:suffix'="" suffix = suffix _ " " 
	Q ..StreetPrefix() _ " " _ suffix _  ##class(cosFaker.Name).FullName(2)
]]></Implementation>
</Method>

<Method name="Latitude">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ($Random(180 * 10000) / 10000.0) - 90.0
]]></Implementation>
</Method>

<Method name="Longitude">
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[	Quit ($Random(360 * 10000) / 10000.0 ) - 180.0
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.App">
<Super>%RegisteredObject</Super>
<TimeChanged>64016,57122.573</TimeChanged>
<TimeCreated>64016,37345.119926</TimeCreated>

<Method name="FunctionName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGroup="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S:pSeparator="" pSeparator = " "
	S action = ##class(cosFaker.Data.PtBr).AppAction(pGroup)
	S function = ##class(cosFaker.Data.PtBr).AppType()
	Q action _ pSeparator _ function
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Commerce">
<TimeChanged>64303,61150.24185</TimeChanged>
<TimeCreated>64016,37345.119926</TimeCreated>

<Method name="Price">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=0,pMax:%Integer=1000,pDec:%Integer=2,pSymbol:%String=""</FormalSpec>
<Implementation><![CDATA[
	Set bOk = $$$NO, $Piece(dec,"9",pDec+1)="", $Piece(tmp,"0",pDec+1)=""
	
	While bOk = $$$NO {
		Set randdec = $Random(dec)
		Set rand = $Random(pMax ) _ "." _ randdec _ $Extract(tmp, 0, $Length(tmp)-$Length(randdec))
		Set:((rand >= pMin)&&(rand <= pMax)) bOk = $$$YES
	}
	
	Quit pSymbol _ rand
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Data.PtBr">
<Super>%RegisteredObject</Super>
<TimeChanged>64016,57272.17725</TimeChanged>
<TimeCreated>64016,39746.54747</TimeCreated>

<Method name="AppAction">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGroup=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	S:pGroup="" pGroup = $ListGet($ListFromString("SQL,IF,FUN",","),$Random(3)+1)
	
	If pGroup = "SQL" {
		Set $List(actions,*+1) = "Buscar"
		Set $List(actions,*+1) = "Resultados"
		Set $List(actions,*+1) = "Persistir"
		Set $List(actions,*+1) = "Acessar"
		Set $List(actions,*+1) = "Integrar"
		Set $List(actions,*+1) = "Totalizar"
		Set $List(actions,*+1) = "Contar"
		Set $List(actions,*+1) = "Virtualizar"
		Set $List(actions,*+1) = "Consultar"
		Set $List(actions,*+1) = "Verificar"
		Set $List(actions,*+1) = "Gerar"

	}
	
	If pGroup = "IF" {
		Set $List(actions,*+1) = "Comparar"
		Set $List(actions,*+1) = "Verificar"
		Set $List(actions,*+1) = "Habilitar"
		Set $List(actions,*+1) = "Validar"
	}
	
	If pGroup = "FUN" {
		Set $List(actions,*+1) = "Calcular"
		Set $List(actions,*+1) = "Analisar"
		Set $List(actions,*+1) = "Executar"
		Set $List(actions,*+1) = "Atribuir"
		Set $List(actions,*+1) = "Gerar"
		Set $List(actions,*+1) = "Totalizar"

	}
	
		; S $List(actions,*+1) = ""
		
	Set output = $ListGet(actions,$Random($ListLength(actions)) + 1)
	Kill actions
	Quit output
]]></Implementation>
</Method>

<Method name="AppType">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(things,*+1) = "ICMS"
	Set $List(things,*+1) = "Imposto"
	Set $List(things,*+1) = "Nota Fiscal"
	Set $List(things,*+1) = "Renda"
	Set $List(things,*+1) = "Venda"
	Set $List(things,*+1) = "Itens"
	Set $List(things,*+1) = "Loja"
	Set $List(things,*+1) = "Vendedor"
	Set $List(things,*+1) = "Produtos"
	Set $List(things,*+1) = "Região"
	Set $List(things,*+1) = "Localização"
	Set $List(things,*+1) = "Preços"
	;S $List(things,*+1) = ""
	
	Set output = $ListGet(things,$Random($ListLength(things)) + 1)
	Kill things
	Quit output
]]></Implementation>
</Method>

<Method name="AppName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
  	Set $List(appNames,*+1) = "Redhold"
  	Set $List(appNames,*+1) = "Treeflex"
  	Set $List(appNames,*+1) = "Trippledex"
  	Set $List(appNames,*+1) = "Kanlam"
  	Set $List(appNames,*+1) = "Bigtax"
  	Set $List(appNames,*+1) = "Daltfresh"
  	Set $List(appNames,*+1) = "Toughjoyfax"
  	Set $List(appNames,*+1) = "Mat Lam Tam"
  	Set $List(appNames,*+1) = "Otcom"
  	Set $List(appNames,*+1) = "Tres-Zap"
  	Set $List(appNames,*+1) = "Y-Solowarm"
  	Set $List(appNames,*+1) = "Tresom"
  	Set $List(appNames,*+1) = "Voltsillam"
  	Set $List(appNames,*+1) = "Biodex"
  	Set $List(appNames,*+1) = "Greenlam"
  	Set $List(appNames,*+1) = "Viva"
  	Set $List(appNames,*+1) = "Matsoft"
  	Set $List(appNames,*+1) = "Temp"
  	Set $List(appNames,*+1) = "Zoolab"
  	Set $List(appNames,*+1) = "Subin"
  	Set $List(appNames,*+1) = "Rank"
  	Set $List(appNames,*+1) = "Job"
  	Set $List(appNames,*+1) = "Stringtough"
  	Set $List(appNames,*+1) = "Tin"
  	Set $List(appNames,*+1) = "It"
  	Set $List(appNames,*+1) = "Home Ing"
  	Set $List(appNames,*+1) = "Zamit"
  	Set $List(appNames,*+1) = "Sonsing"
  	Set $List(appNames,*+1) = "Konklab"
  	Set $List(appNames,*+1) = "Alpha"
  	Set $List(appNames,*+1) = "Latlux"
  	Set $List(appNames,*+1) = "Voyatouch"
  	Set $List(appNames,*+1) = "Alphazap"
  	Set $List(appNames,*+1) = "Holdlamis"
  	Set $List(appNames,*+1) = "Zaam-Dox"
  	Set $List(appNames,*+1) = "Sub-Ex"
  	Set $List(appNames,*+1) = "Quo Lux"
  	Set $List(appNames,*+1) = "Bamity"
  	Set $List(appNames,*+1) = "Ventosanzap"
  	Set $List(appNames,*+1) = "Lotstring"
  	Set $List(appNames,*+1) = "Hatity"
  	Set $List(appNames,*+1) = "Tempsoft"
  	Set $List(appNames,*+1) = "Overhold"
  	Set $List(appNames,*+1) = "Fixflex"
  	Set $List(appNames,*+1) = "Konklux"
  	Set $List(appNames,*+1) = "Zontrax"
  	Set $List(appNames,*+1) = "Tampflex"
  	Set $List(appNames,*+1) = "Span"
  	Set $List(appNames,*+1) = "Namfix"
  	Set $List(appNames,*+1) = "Transcof"
  	Set $List(appNames,*+1) = "Stim"
  	Set $List(appNames,*+1) = "Fix San"
  	Set $List(appNames,*+1) = "Sonair"
  	Set $List(appNames,*+1) = "Stronghold"
  	Set $List(appNames,*+1) = "Fintone"
  	Set $List(appNames,*+1) = "Y-find"
  	Set $List(appNames,*+1) = "Opela"
  	Set $List(appNames,*+1) = "Lotlux"
  	Set $List(appNames,*+1) = "Ronstring"
  	Set $List(appNames,*+1) = "Zathin"
  	Set $List(appNames,*+1) = "Duobam"
  	Set $List(appNames,*+1) = "Keylex"
  	Set $List(appNames,*+1) = "Andalax"
  	Set $List(appNames,*+1) = "Solarbreeze"
  	Set $List(appNames,*+1) = "Cookley"
  	Set $List(appNames,*+1) = "Vagram"
  	Set $List(appNames,*+1) = "Aerified"
  	Set $List(appNames,*+1) = "Pannier"
  	Set $List(appNames,*+1) = "Asoka"
  	Set $List(appNames,*+1) = "Regrant"
  	Set $List(appNames,*+1) = "Wrapsafe"
  	Set $List(appNames,*+1) = "Prodder"
  	Set $List(appNames,*+1) = "Bytecard"
  	Set $List(appNames,*+1) = "Bitchip"
  	Set $List(appNames,*+1) = "Veribet"
  	Set $List(appNames,*+1) = "Gembucket"
  	Set $List(appNames,*+1) = "Cardguard"
  	Set $List(appNames,*+1) = "Bitwolf"
  	Set $List(appNames,*+1) = "Cardify"
  	Set $List(appNames,*+1) = "Domainer"
  	Set $List(appNames,*+1) = "Flowdesk"
  	Set $List(appNames,*+1) = "Flexidy"
		
	Set output = $ListGet(appNames,$Random($ListLength(appNames)) + 1)
        ; ["ability"S $List(appNames,*+1) = "access"S $List(appNames,*+1) = "adapter"S $List(appNames,*+1) = "algorithm"S $List(appNames,*+1) = "alliance"S $List(appNames,*+1) = "analyzer"S $List(appNames,*+1) = "application"S $List(appNames,*+1) = "approach"S $List(appNames,*+1) = "architecture"S $List(appNames,*+1) = "archive"S $List(appNames,*+1) = "artificial intelligence"S $List(appNames,*+1) = "array"S $List(appNames,*+1) = "attitude"S $List(appNames,*+1) = "benchmark"S $List(appNames,*+1) = "budgetary management"S $List(appNames,*+1) = "capability"S $List(appNames,*+1) = "capacity"S $List(appNames,*+1) = "challenge"S $List(appNames,*+1) = "circuit"S $List(appNames,*+1) = "collaboration"S $List(appNames,*+1) = "complexity"S $List(appNames,*+1) = "concept"S $List(appNames,*+1) = "conglomeration"S $List(appNames,*+1) = "contingency"S $List(appNames,*+1) = "core"S $List(appNames,*+1) = "customer loyalty"S $List(appNames,*+1) = "database"S $List(appNames,*+1) = "data-warehouse"S $List(appNames,*+1) = "definition"S $List(appNames,*+1) = "emulation"S $List(appNames,*+1) = "encoding"S $List(appNames,*+1) = "encryption"S $List(appNames,*+1) = "extranet"S $List(appNames,*+1) = "firmware"S $List(appNames,*+1) = "flexibility"S $List(appNames,*+1) = "focus group"S $List(appNames,*+1) = "forecast"S $List(appNames,*+1) = "frame"S $List(appNames,*+1) = "framework"S $List(appNames,*+1) = "function"S $List(appNames,*+1) = "functionalities"S $List(appNames,*+1) = "Graphic Interface"S $List(appNames,*+1) = "groupware"S $List(appNames,*+1) = "Graphical User Interface"S $List(appNames,*+1) = "hardware"S $List(appNames,*+1) = "help-desk"S $List(appNames,*+1) = "hierarchy"S $List(appNames,*+1) = "hub"S $List(appNames,*+1) = "implementation"S $List(appNames,*+1) = "info-mediaries"S $List(appNames,*+1) = "infrastructure"S $List(appNames,*+1) = "initiative"S $List(appNames,*+1) = "installation"S $List(appNames,*+1) = "instruction set"S $List(appNames,*+1) = "interface"S $List(appNames,*+1) = "internet solution"S $List(appNames,*+1) = "intranet"S $List(appNames,*+1) = "knowledge user"S $List(appNames,*+1) = "knowledge base"S $List(appNames,*+1) = "local area network"S $List(appNames,*+1) = "leverage"S $List(appNames,*+1) = "matrices"S $List(appNames,*+1) = "matrix"S $List(appNames,*+1) = "methodology"S $List(appNames,*+1) = "middleware"S $List(appNames,*+1) = "migration"S $List(appNames,*+1) = "model"S $List(appNames,*+1) = "moderator"S $List(appNames,*+1) = "monitoring"S $List(appNames,*+1) = "moratorium"S $List(appNames,*+1) = "neural-net"S $List(appNames,*+1) = "open architecture"S $List(appNames,*+1) = "open system"S $List(appNames,*+1) = "orchestration"S $List(appNames,*+1) = "paradigm"S $List(appNames,*+1) = "parallelism"S $List(appNames,*+1) = "policy"S $List(appNames,*+1) = "portal"S $List(appNames,*+1) = "pricing structure"S $List(appNames,*+1) = "process improvement"S $List(appNames,*+1) = "product"S $List(appNames,*+1) = "productivity"S $List(appNames,*+1) = "project"S $List(appNames,*+1) = "projection"S $List(appNames,*+1) = "protocol"S $List(appNames,*+1) = "secured line"S $List(appNames,*+1) = "service-desk"S $List(appNames,*+1) = "software"S $List(appNames,*+1) = "solution"S $List(appNames,*+1) = "standardization"S $List(appNames,*+1) = "strategy"S $List(appNames,*+1) = "structure"S $List(appNames,*+1) = "success"S $List(appNames,*+1) = "superstructure"S $List(appNames,*+1) = "support"S $List(appNames,*+1) = "synergy"S $List(appNames,*+1) = "system engine"S $List(appNames,*+1) = "task-force"S $List(appNames,*+1) = "throughput"S $List(appNames,*+1) = "time-frame"S $List(appNames,*+1) = "toolset"S $List(appNames,*+1) = "utilisation"S $List(appNames,*+1) = "website"S $List(appNames,*+1) = "workforce"]
	
	Kill appNames
	Quit output
]]></Implementation>
</Method>

<Method name="LastName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(lastName, *+1) = "Silva"
	Set $List(lastName, *+1) = "Souza"
	Set $List(lastName, *+1) = "Carvalho"
	Set $List(lastName, *+1) = "Santos"
	Set $List(lastName, *+1) = "Reis"
	Set $List(lastName, *+1) = "Xavier"
	Set $List(lastName, *+1) = "Franco"
	Set $List(lastName, *+1) = "Braga"
	Set $List(lastName, *+1) = "Macedo"
	Set $List(lastName, *+1) = "Batista"
	Set $List(lastName, *+1) = "Barreto"
	Set $List(lastName, *+1) = "Barros"
	Set $List(lastName, *+1) = "Moraes"
	Set $List(lastName, *+1) = "Malta"
	Set $List(lastName, *+1) = "Carmello"
	Set $List(lastName, *+1) = "Mengga"
	Set $List(lastName, *+1) = "Costa"
	Set $List(lastName, *+1) = "Rodrigues"
	Set $List(lastName, *+1) = "Pereira"
	Set $List(lastName, *+1) = "Melo"
	Set $List(lastName, *+1) = "Saraiva"
	Set $List(lastName, *+1) = "Nogueira"
	Set $List(lastName, *+1) = "Oliveira"
	Set $List(lastName, *+1) = "Martins"
	Set $List(lastName, *+1) = "Moreira"
	Set $List(lastName, *+1) = "Lima"
	Set $List(lastName, *+1) = "Vaz"
	Set $List(lastName, *+1) = "Albuquerque"
    Set $List(lastName, *+1) = "Almeida"
    Set $List(lastName, *+1) = "Alves"
    Set $List(lastName, *+1) = "Aragão"
    Set $List(lastName, *+1) = "Araújo"
    Set $List(lastName, *+1) = "Barbosa"
    Set $List(lastName, *+1) = "Brito"
    Set $List(lastName, *+1) = "Caldeira"
    Set $List(lastName, *+1) = "Campos"
    Set $List(lastName, *+1) = "Cardoso"
    Set $List(lastName, *+1) = "Cardoso"
    Set $List(lastName, *+1) = "Carvalho"
    Set $List(lastName, *+1) = "Castro"
    Set $List(lastName, *+1) = "Cavalcante"
    Set $List(lastName, *+1) = "Cavalcanti"
    Set $List(lastName, *+1) = "da Conceição"
    Set $List(lastName, *+1) = "da Costa"
    Set $List(lastName, *+1) = "da Cruz"
    Set $List(lastName, *+1) = "da Cunha"
    Set $List(lastName, *+1) = "da Luz"
    Set $List(lastName, *+1) = "da Mata"
    Set $List(lastName, *+1) = "da Mota"
    Set $List(lastName, *+1) = "da Paz"
    Set $List(lastName, *+1) = "da Rocha"
    Set $List(lastName, *+1) = "da Rosa"
    Set $List(lastName, *+1) = "das Neves"
    Set $List(lastName, *+1) = "Dias"
    Set $List(lastName, *+1) = "Duarte"
    Set $List(lastName, *+1) = "Farias"
    Set $List(lastName, *+1) = "Fernandes"
    Set $List(lastName, *+1) = "Ferreira"
    Set $List(lastName, *+1) = "Fogaça"
    Set $List(lastName, *+1) = "Freitas"
    Set $List(lastName, *+1) = "Gomes"
    Set $List(lastName, *+1) = "Gonçalves"
    Set $List(lastName, *+1) = "Lopes"
    Set $List(lastName, *+1) = "Mendes"
    Set $List(lastName, *+1) = "Monteiro"
    Set $List(lastName, *+1) = "Moura"
    Set $List(lastName, *+1) = "Nascimento"
    Set $List(lastName, *+1) = "Novaes"
    Set $List(lastName, *+1) = "Nunes"
    Set $List(lastName, *+1) = "Peixoto"
    Set $List(lastName, *+1) = "Pinheiro"
    Set $List(lastName, *+1) = "Pires"
    Set $List(lastName, *+1) = "Porto"
    Set $List(lastName, *+1) = "Ramos"
    Set $List(lastName, *+1) = "Rezende"
    Set $List(lastName, *+1) = "Ribeiro"
    Set $List(lastName, *+1) = "Rocha"
    Set $List(lastName, *+1) = "Sales"
    Set $List(lastName, *+1) = "Silveira"
    Set $List(lastName, *+1) = "Teixeira"
    Set $List(lastName, *+1) = "Viana"
    Set $List(lastName, *+1) = "Vieira"
	Set output = $ListGet(lastName,$Random($ListLength(lastName)) + 1)
	Kill lastName
	Quit output
]]></Implementation>
</Method>

<Method name="PersonSuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(PersonSuffix, *+1) = "Jr."
  	Set $List(PersonSuffix, *+1) = "Neto"
	Set $List(PersonSuffix, *+1) = "Filho"
	Set output = $ListGet(PersonSuffix,$Random($ListLength(PersonSuffix)) + 1)
	Kill PersonSuffix
	Quit output
]]></Implementation>
</Method>

<Method name="CompanySuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(CompanySuffix, *+1) = "EIRELI"
	Set $List(CompanySuffix, *+1) = "S.A."
	Set $List(CompanySuffix, *+1) = "LTDA"
	Set $List(CompanySuffix, *+1) = "e Associados"
	Set $List(CompanySuffix, *+1) = "Comércio"
	Set $List(CompanySuffix, *+1) = "Tecnologia"
	Set output = $ListGet(CompanySuffix,$Random($ListLength(CompanySuffix)) + 1)
	Kill CompanySuffix
	Quit output
]]></Implementation>
</Method>

<Method name="DomainSuffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(domainSuffix, *+1) = "com"
  	Set $List(domainSuffix, *+1) = "biz"
  	Set $List(domainSuffix, *+1) = "info"
  	Set $List(domainSuffix, *+1) = "name"
  	Set $List(domainSuffix, *+1) = "net"
  	Set $List(domainSuffix, *+1) = "org"
	Set output = $ListGet(domainSuffix,$Random($ListLength(domainSuffix)) + 1)
	Kill domainSuffix
	Quit output
]]></Implementation>
</Method>

<Method name="EmailProvider">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(freeEmailprovider, *+1) = "gmail.com"
  	Set $List(freeEmailprovider, *+1) = "yahoo.com"
	Set $List(freeEmailprovider, *+1) = "hotmail.com"
  	Set $List(freeEmailprovider, *+1) = "bol.com.br"
	Set output = $ListGet(freeEmailprovider,$Random($ListLength(freeEmailprovider)) + 1)
	Kill freeEmailprovider
	Quit output
]]></Implementation>
</Method>

<Method name="FemaleFirstName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(firstName, *+1) = "Alessandra"
	Set $List(firstName, *+1) = "Aline"
	Set $List(firstName, *+1) = "Bruna"
	Set $List(firstName, *+1) = "Carla"
	Set $List(firstName, *+1) = "Célia"
	Set $List(firstName, *+1) = "Cecília"
	Set $List(firstName, *+1) = "Dalila"
	Set $List(firstName, *+1) = "Eduarda"
	Set $List(firstName, *+1) = "Esther"
	Set $List(firstName, *+1) = "Fabrícia"
	Set $List(firstName, *+1) = "Felícia"
	Set $List(firstName, *+1) = "Fabiana"
	Set $List(firstName, *+1) = "Isabel"
	Set $List(firstName, *+1) = "Isabela"
	Set $List(firstName, *+1) = "Joana"
	Set $List(firstName, *+1) = "Graziela"
	Set $List(firstName, *+1) = "Júlia"
	Set $List(firstName, *+1) = "Janaína"
	Set $List(firstName, *+1) = "Karla"
	Set $List(firstName, *+1) = "Lorena"
	Set $List(firstName, *+1) = "Lorraine"
	Set $List(firstName, *+1) = "Larissa"
	Set $List(firstName, *+1) = "Meire"
	Set $List(firstName, *+1) = "Marcela"
	Set $List(firstName, *+1) = "Margarida"
	Set $List(firstName, *+1) = "Mércia"
	Set $List(firstName, *+1) = "Márcia"
	Set $List(firstName, *+1) = "Marli"
	Set $List(firstName, *+1) = "Morgana"
	Set $List(firstName, *+1) = "Maria"
	Set $List(firstName, *+1) = "Marta"
	Set $List(firstName, *+1) = "Natália"
	Set $List(firstName, *+1) = "Núbia"
	Set $List(firstName, *+1) = "Ofélia"
	Set $List(firstName, *+1) = "Paula"
	Set $List(firstName, *+1) = "Rafaelly"
	Set $List(firstName, *+1) = "Rafaela"
	Set $List(firstName, *+1) = "Roberta"
	Set $List(firstName, *+1) = "Sílvia"
	Set $List(firstName, *+1) = "Silvana"
	Set $List(firstName, *+1) = "Suélen"
	Set $List(firstName, *+1) = "Sara"
	Set $List(firstName, *+1) = "Talita"
	Set $List(firstName, *+1) = "Vanessa"
	Set $List(firstName, *+1) = "Vitória"
	Set output = $ListGet(firstName,$Random($ListLength(firstName)) + 1)
	Kill firstName
	Quit output
]]></Implementation>
</Method>

<Method name="MaleFirstName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(firstName, *+1) = "Alessandro"
	Set $List(firstName, *+1) = "Alexandre"
	Set $List(firstName, *+1) = "Antônio"
	Set $List(firstName, *+1) = "Breno"
	Set $List(firstName, *+1) = "Carlos"
	Set $List(firstName, *+1) = "César"
	Set $List(firstName, *+1) = "Danilo"
	Set $List(firstName, *+1) = "Deneval"
	Set $List(firstName, *+1) = "Eduardo"
	Set $List(firstName, *+1) = "Elísio"
	Set $List(firstName, *+1) = "Fábio"
	Set $List(firstName, *+1) = "Fabrício"
	Set $List(firstName, *+1) = "Félix"
	Set $List(firstName, *+1) = "Felipe"
	Set $List(firstName, *+1) = "Feliciano"
	Set $List(firstName, *+1) = "Frederico"
	Set $List(firstName, *+1) = "Fabiano"
	Set $List(firstName, *+1) = "Gustavo"
	Set $List(firstName, *+1) = "Guilherme"
	Set $List(firstName, *+1) = "Gúbio"
	Set $List(firstName, *+1) = "Heitor"
	Set $List(firstName, *+1) = "Hélio"
	Set $List(firstName, *+1) = "Henry"
	Set $List(firstName, *+1) = "Hugo"
	Set $List(firstName, *+1) = "Ígor"
	Set $List(firstName, *+1) = "João"
	Set $List(firstName, *+1) = "Josemar"
	Set $List(firstName, *+1) = "Júlio César"
	Set $List(firstName, *+1) = "Júlio"
	Set $List(firstName, *+1) = "Kléber"
	Set $List(firstName, *+1) = "Lucas"
	Set $List(firstName, *+1) = "Luiggi"
	Set $List(firstName, *+1) = "Leandro"
	Set $List(firstName, *+1) = "Leonardo"
	Set $List(firstName, *+1) = "Ladislau"
	Set $List(firstName, *+1) = "Marcos"
	Set $List(firstName, *+1) = "Marcelo"
	Set $List(firstName, *+1) = "Mario"
	Set $List(firstName, *+1) = "Norberto"
	Set $List(firstName, *+1) = "Nataniel"
	Set $List(firstName, *+1) = "Paulo"
	Set $List(firstName, *+1) = "Pablo"
	Set $List(firstName, *+1) = "Pedro"
	Set $List(firstName, *+1) = "Raul"
	Set $List(firstName, *+1) = "Rafael"
	Set $List(firstName, *+1) = "Ricardo"
	Set $List(firstName, *+1) = "Roberto"
	Set $List(firstName, *+1) = "Silas"
	Set $List(firstName, *+1) = "Salvador"
	Set $List(firstName, *+1) = "Sirineu"
	Set $List(firstName, *+1) = "Tertuliano"
	Set $List(firstName, *+1) = "Vicente"
	Set $List(firstName, *+1) = "Víctor"
	Set $List(firstName, *+1) = "Yango"
	Set $List(firstName, *+1) = "Yago"
	Set $List(firstName, *+1) = "Yuri"
	Set $List(firstName, *+1) = "Washington"
	Set $List(firstName, *+1) = "Warley"
	Set output = $ListGet(firstName,$Random($ListLength(firstName)) + 1)
	Kill firstName
	Quit output
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Finance">
<TimeChanged>64316,40546.910552</TimeChanged>
<TimeCreated>64315,30624.365455</TimeCreated>

<Method name="Amount">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=0,pMax:%Integer=10000,pDec:%Integer=2,pSeparator=",",pSymbol:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set value = pMin-10, dec = ""
	While ('..In(value, pMin, pMax)) {
		Set value = $Random(pMax + 1)
	}
	
	For k=1:1:pDec {
		Set dec = dec _ $Random(10)
	}
	
	Quit pSymbol _ value _ pSeparator _ dec
]]></Implementation>
</Method>

<Method name="BitcoinAddress">
<ClassMethod>1</ClassMethod>
<FormalSpec>pMin:%Integer=24,pMax:%Integer=34</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set length = "", bitcoinAddress = "", 
		digits58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
	While ('..In(length, pMin, pMax)) {
		Set length = $Random(36)
	}
	
	For k=1:1:27{
		Set i = $Random($Length(digits58)) + 1
		Set bitcoinAddress = bitcoinAddress _ $Extract(digits58,i)
	}

	Quit 1 _ bitcoinAddress
]]></Implementation>
</Method>

<Method name="In">
<ClassMethod>1</ClassMethod>
<FormalSpec>pValue,pMin:%Integer,pMax:%Integer</FormalSpec>
<Private>1</Private>
<ReturnType>%Boolean</ReturnType>
<Implementation><![CDATA[	Quit ((pValue>=pMin)&&(pValue<=pMax))
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Internet">
<Super>%RegisteredObject</Super>
<TimeChanged>64309,30323.441617</TimeChanged>
<TimeCreated>64015,57627.232261</TimeCreated>

<Method name="UserName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFirstName:%String="",pLastName:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set rand = $Random(3)
	Set separator(0) = ".", separator(1) = "_"
	Set:pFirstName="" pFirstName = ##class(cosFaker.Name).FirstName()
	Set:pLastName="" pLastName = ##class(cosFaker.Name).LastName()
	
	If rand = 0 {
		Set username = pFirstName _ $Random(99)
	} ElseIf rand = 1 {
		Set username = pFirstName _ $Get(separator($Random(3))) _ pLastName
	} Else {
		Set username = pFirstName _ $Get(separator($Random(3))) _ pLastName _ $Random(99)
	}
	
	Quit ..Clean(username)
]]></Implementation>
</Method>

<Method name="Email">
<ClassMethod>1</ClassMethod>
<FormalSpec>pFirstName:%String="",pLastName:%String="",pProvider:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pProvider="" pProvider = ##class(cosFaker.Data.PtBr).EmailProvider()
	Quit ..UserName(pFirstName, pLastName) _ "@" _ pProvider
]]></Implementation>
</Method>

<Method name="Protocol">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set protocols(0) = "http"
	Set protocols(1) = "https"
	Quit $Get(protocols($Random(2)))
]]></Implementation>
</Method>

<Method name="DomainWord">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set output = ##class(cosFaker.Name).FirstName()
	Set m=##class(%Regex.Matcher).%New("([\\~#&*{}/:<>?|\""'])")
    Set m.Text = output
    While m.Locate() {
	    Set output = $Replace(output, m.Group, "")
    }
	Quit ..Clean(output)
]]></Implementation>
</Method>

<Method name="DomainName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZConvert(..DomainWord(),"l") _ "." _ ##class(cosFaker.Data.PtBr).DomainSuffix()
]]></Implementation>
</Method>

<Method name="Url">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set www(0) = "www."
	Quit ..Protocol() _ "://" _ $Get(www($Random(2))) _ ..DomainName()
]]></Implementation>
</Method>

<Method name="Clean">
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String</FormalSpec>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit $ZConvert($Translate(pName,"úóéíá","uoeia"),"l")
]]></Implementation>
</Method>

<Method name="Avatar">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSize:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pSize="" pSize = 150
	Quit "http://www.avatarpro.biz/avatar?s="_pSize
]]></Implementation>
</Method>

<Method name="Initializer">
<Private>1</Private>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do ..Initializer()
	Quit $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Lorem">
<Super>%RegisteredObject</Super>
<TimeChanged>64016,49520.739208</TimeChanged>
<TimeCreated>64015,32148.367654</TimeCreated>

<Method name="Word">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Q ..LoremIpsum()
]]></Implementation>
</Method>

<Method name="Words">
<ClassMethod>1</ClassMethod>
<FormalSpec>pNum:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pNum="" pNum = 3
	For k=1:1:pNum {
		Set $List(words,*+1) = ..Word()
	}
	Quit $ListToString(words, " ")
]]></Implementation>
</Method>

<Method name="Sentence">
<ClassMethod>1</ClassMethod>
<FormalSpec>pWordCount:%Integer="",pMin:%Integer=3,pMax:%Integer=10</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pWordCount = "" {
		For {
			Set pWordCount = $Random(10)
			Quit:((pWordCount>pMin)&&(pWordCount < pMax))
		}
	}
	
	Set sentence = ..Words(pWordCount)
	Quit $ZConvert($Extract(sentence,1,1), "U") _ $Extract(sentence,2,*) _ "."
]]></Implementation>
</Method>

<Method name="Sentences">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSentenceCount:%Integer="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pSentenceCount = "" {
		For {
			Set pSentenceCount = $Random(6)
			Quit:pSentenceCount>2
		}
	}
	
	Set:pSeparator="" pSeparator = " "
	
	For k=1:1:pSentenceCount {
		Set $List(sentences,*+1) = ..Sentence()
	}

	Quit $ListToString($Get(sentences), pSeparator)
]]></Implementation>
</Method>

<Method name="Paragraph">
<ClassMethod>1</ClassMethod>
<FormalSpec>pSentenceCount:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pSentenceCount="" pSentenceCount = 3
	Quit ..Sentences(pSentenceCount + $Random(3))
]]></Implementation>
</Method>

<Method name="Paragraphs">
<ClassMethod>1</ClassMethod>
<FormalSpec>pParagraphCount:%Integer="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pParagraphCount="" pParagraphCount = 3
	Set:pSeparator="" pSeparator = $Char(10) _ $Char(13) ; \n \r OR LF CR
	
	For k=1:1:pParagraphCount {
		Set $List(paragraphs,*+1) = ..Paragraph()
	}
	
	Quit $ListToString($Get(paragraphs), pSeparator)
]]></Implementation>
</Method>

<Method name="Lines">
<ClassMethod>1</ClassMethod>
<FormalSpec>pLineCount:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	If pLineCount = "" {
		For {
			Set pLineCount = $Random(5)
			Quit:pLineCount>1
		}
	}
	
	Quit ..Sentences(pLineCount, $Char(10))
]]></Implementation>
</Method>

<Method name="Text">
<ClassMethod>1</ClassMethod>
<FormalSpec>pTimes:%Integer=1</FormalSpec>
<Implementation><![CDATA[
	Set output = ""
	For k=1:1:pTimes {
		Set rand = $Random(7)

		If rand = 1 { Set output = output _ ..Word() }
		ElseIf rand = 2 { Set output = output _ ..Words() }
		ElseIf rand = 3 { Set output = output _ ..Sentence() }
		ElseIf rand = 4 { Set output = output _ ..Sentences() }
		ElseIf rand = 5 { Set output = output _ ..Paragraph() }
		ElseIf rand = 6 { Set output = output _ ..Paragraphs() }
		ElseIf rand = 7 { Set output = output _ ..Lines() }
		
	}
	
	Quit output
]]></Implementation>
</Method>

<Method name="LoremIpsum">
<ClassMethod>1</ClassMethod>
<Private>1</Private>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set $List(lorem, *+1) = "alias"
    Set $List(lorem, *+1) = "consequatur"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "perferendis"
    Set $List(lorem, *+1) = "sit"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "accusantium"
    Set $List(lorem, *+1) = "doloremque"
    Set $List(lorem, *+1) = "aperiam"
    Set $List(lorem, *+1) = "eaque"
    Set $List(lorem, *+1) = "ipsa"
    Set $List(lorem, *+1) = "quae"
    Set $List(lorem, *+1) = "ab"
    Set $List(lorem, *+1) = "illo"
    Set $List(lorem, *+1) = "inventore"
    Set $List(lorem, *+1) = "veritatis"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "quasi"
    Set $List(lorem, *+1) = "architecto"
    Set $List(lorem, *+1) = "beatae"
    Set $List(lorem, *+1) = "vitae"
    Set $List(lorem, *+1) = "dicta"
    Set $List(lorem, *+1) = "sunt"
    Set $List(lorem, *+1) = "explicabo"
    Set $List(lorem, *+1) = "aspernatur"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "odit"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "fugit"
    Set $List(lorem, *+1) = "sed"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "consequuntur"
    Set $List(lorem, *+1) = "magni"
    Set $List(lorem, *+1) = "dolores"
    Set $List(lorem, *+1) = "eos"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "ratione"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "sequi"
    Set $List(lorem, *+1) = "nesciunt"
    Set $List(lorem, *+1) = "neque"
    Set $List(lorem, *+1) = "dolorem"
    Set $List(lorem, *+1) = "ipsum"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "dolor"
    Set $List(lorem, *+1) = "sit"
    Set $List(lorem, *+1) = "amet"
    Set $List(lorem, *+1) = "consectetur"
    Set $List(lorem, *+1) = "adipisci"
    Set $List(lorem, *+1) = "velit"
    Set $List(lorem, *+1) = "sed"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "non"
    Set $List(lorem, *+1) = "numquam"
    Set $List(lorem, *+1) = "eius"
    Set $List(lorem, *+1) = "modi"
    Set $List(lorem, *+1) = "tempora"
    Set $List(lorem, *+1) = "incidunt"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "labore"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "dolore"
    Set $List(lorem, *+1) = "magnam"
    Set $List(lorem, *+1) = "aliquam"
    Set $List(lorem, *+1) = "quaerat"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "enim"
    Set $List(lorem, *+1) = "ad"
    Set $List(lorem, *+1) = "minima"
    Set $List(lorem, *+1) = "veniam"
    Set $List(lorem, *+1) = "quis"
    Set $List(lorem, *+1) = "nostrum"
    Set $List(lorem, *+1) = "exercitationem"
    Set $List(lorem, *+1) = "ullam"
    Set $List(lorem, *+1) = "corporis"
    Set $List(lorem, *+1) = "nemo"
    Set $List(lorem, *+1) = "enim"
    Set $List(lorem, *+1) = "ipsam"
    Set $List(lorem, *+1) = "voluptatem"
    Set $List(lorem, *+1) = "quia"
    Set $List(lorem, *+1) = "voluptas"
    Set $List(lorem, *+1) = "sit"
    Set $List(lorem, *+1) = "suscipit"
    Set $List(lorem, *+1) = "laboriosam"
    Set $List(lorem, *+1) = "nisi"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "aliquid"
    Set $List(lorem, *+1) = "ex"
    Set $List(lorem, *+1) = "ea"
    Set $List(lorem, *+1) = "commodi"
    Set $List(lorem, *+1) = "consequatur"
    Set $List(lorem, *+1) = "quis"
    Set $List(lorem, *+1) = "autem"
    Set $List(lorem, *+1) = "vel"
    Set $List(lorem, *+1) = "eum"
    Set $List(lorem, *+1) = "iure"
    Set $List(lorem, *+1) = "reprehenderit"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "in"
    Set $List(lorem, *+1) = "ea"
    Set $List(lorem, *+1) = "voluptate"
    Set $List(lorem, *+1) = "velit"
    Set $List(lorem, *+1) = "esse"
    Set $List(lorem, *+1) = "quam"
    Set $List(lorem, *+1) = "nihil"
    Set $List(lorem, *+1) = "molestiae"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "iusto"
    Set $List(lorem, *+1) = "odio"
    Set $List(lorem, *+1) = "dignissimos"
    Set $List(lorem, *+1) = "ducimus"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "blanditiis"
    Set $List(lorem, *+1) = "praesentium"
    Set $List(lorem, *+1) = "laudantium"
    Set $List(lorem, *+1) = "totam"
    Set $List(lorem, *+1) = "rem"
    Set $List(lorem, *+1) = "voluptatum"
    Set $List(lorem, *+1) = "deleniti"
    Set $List(lorem, *+1) = "atque"
    Set $List(lorem, *+1) = "corrupti"
    Set $List(lorem, *+1) = "quos"
    Set $List(lorem, *+1) = "dolores"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "quas"
    Set $List(lorem, *+1) = "molestias"
    Set $List(lorem, *+1) = "excepturi"
    Set $List(lorem, *+1) = "sint"
    Set $List(lorem, *+1) = "occaecati"
    Set $List(lorem, *+1) = "cupiditate"
    Set $List(lorem, *+1) = "non"
    Set $List(lorem, *+1) = "provident"
    Set $List(lorem, *+1) = "sed"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "perspiciatis"
    Set $List(lorem, *+1) = "unde"
    Set $List(lorem, *+1) = "omnis"
    Set $List(lorem, *+1) = "iste"
    Set $List(lorem, *+1) = "natus"
    Set $List(lorem, *+1) = "error"
    Set $List(lorem, *+1) = "similique"
    Set $List(lorem, *+1) = "sunt"
    Set $List(lorem, *+1) = "in"
    Set $List(lorem, *+1) = "culpa"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "officia"
    Set $List(lorem, *+1) = "deserunt"
    Set $List(lorem, *+1) = "mollitia"
    Set $List(lorem, *+1) = "animi"
    Set $List(lorem, *+1) = "id"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "laborum"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "dolorum"
    Set $List(lorem, *+1) = "fuga"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "harum"
    Set $List(lorem, *+1) = "quidem"
    Set $List(lorem, *+1) = "rerum"
    Set $List(lorem, *+1) = "facilis"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "expedita"
    Set $List(lorem, *+1) = "distinctio"
    Set $List(lorem, *+1) = "nam"
    Set $List(lorem, *+1) = "libero"
    Set $List(lorem, *+1) = "tempore"
    Set $List(lorem, *+1) = "cum"
    Set $List(lorem, *+1) = "soluta"
    Set $List(lorem, *+1) = "nobis"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "eligendi"
    Set $List(lorem, *+1) = "optio"
    Set $List(lorem, *+1) = "cumque"
    Set $List(lorem, *+1) = "nihil"
    Set $List(lorem, *+1) = "impedit"
    Set $List(lorem, *+1) = "quo"
    Set $List(lorem, *+1) = "porro"
    Set $List(lorem, *+1) = "quisquam"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "minus"
    Set $List(lorem, *+1) = "id"
    Set $List(lorem, *+1) = "quod"
    Set $List(lorem, *+1) = "maxime"
    Set $List(lorem, *+1) = "placeat"
    Set $List(lorem, *+1) = "facere"
    Set $List(lorem, *+1) = "possimus"
    Set $List(lorem, *+1) = "omnis"
    Set $List(lorem, *+1) = "voluptas"
    Set $List(lorem, *+1) = "assumenda"
    Set $List(lorem, *+1) = "est"
    Set $List(lorem, *+1) = "omnis"
    Set $List(lorem, *+1) = "dolor"
    Set $List(lorem, *+1) = "repellendus"
    Set $List(lorem, *+1) = "temporibus"
    Set $List(lorem, *+1) = "autem"
    Set $List(lorem, *+1) = "quibusdam"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "consequatur"
    Set $List(lorem, *+1) = "vel"
    Set $List(lorem, *+1) = "illum"
    Set $List(lorem, *+1) = "qui"
    Set $List(lorem, *+1) = "dolorem"
    Set $List(lorem, *+1) = "eum"
    Set $List(lorem, *+1) = "fugiat"
    Set $List(lorem, *+1) = "quo"
    Set $List(lorem, *+1) = "voluptas"
    Set $List(lorem, *+1) = "nulla"
    Set $List(lorem, *+1) = "pariatur"
    Set $List(lorem, *+1) = "at"
    Set $List(lorem, *+1) = "vero"
    Set $List(lorem, *+1) = "eos"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "accusamus"
    Set $List(lorem, *+1) = "officiis"
    Set $List(lorem, *+1) = "debitis"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "rerum"
    Set $List(lorem, *+1) = "necessitatibus"
    Set $List(lorem, *+1) = "saepe"
    Set $List(lorem, *+1) = "eveniet"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "voluptates"
    Set $List(lorem, *+1) = "repudiandae"
    Set $List(lorem, *+1) = "sint"
    Set $List(lorem, *+1) = "et"
    Set $List(lorem, *+1) = "molestiae"
    Set $List(lorem, *+1) = "non"
    Set $List(lorem, *+1) = "recusandae"
    Set $List(lorem, *+1) = "itaque"
    Set $List(lorem, *+1) = "earum"
    Set $List(lorem, *+1) = "rerum"
    Set $List(lorem, *+1) = "hic"
    Set $List(lorem, *+1) = "tenetur"
    Set $List(lorem, *+1) = "a"
    Set $List(lorem, *+1) = "sapiente"
    Set $List(lorem, *+1) = "delectus"
    Set $List(lorem, *+1) = "ut"
    Set $List(lorem, *+1) = "aut"
    Set $List(lorem, *+1) = "reiciendis"
    Set $List(lorem, *+1) = "voluptatibus"
    Set $List(lorem, *+1) = "maiores"
    Set $List(lorem, *+1) = "doloribus"
    Set $List(lorem, *+1) = "asperiores"
    Set $List(lorem, *+1) = "repellat"
    
    Set output = $ListGet(lorem,$Random($ListLength(lorem)) + 1)
	Kill lorem
	Quit output
]]></Implementation>
</Method>

<Method name="Hipster">
<ClassMethod>1</ClassMethod>
<FormalSpec>pParagraphCount:%Integer="",pSeparator:%String=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pParagraphCount="" pParagraphCount = 3
	Set:pSeparator="" pSeparator = $Char(10) _ $Char(13) ; \n \r OR LF CR
	
	Set $List(begin, *+1) = "Caros amigos, "
    Set $List(begin, *+1) = "Por outro lado, "
    Set $List(begin, *+1) = "Assim mesmo, "
    Set $List(begin, *+1) = "No entanto, não podemos esquecer que "
    Set $List(begin, *+1) = "Do mesmo modo, "
    Set $List(begin, *+1) = "A prática cotidiana prova que "
    Set $List(begin, *+1) = "Nunca é demais lembrar o peso e o significado destes problemas, uma vez que "
    Set $List(begin, *+1) = "As experiências acumuladas demonstram que "
    Set $List(begin, *+1) = "Acima de tudo, é fundamental ressaltar que "
    Set $List(begin, *+1) = "O incentivo ao avanço tecnológico, assim como "
    Set $List(begin, *+1) = "Não obstante, "
    Set $List(begin, *+1) = "Todas estas questões, devidamente ponderadas, levantam dúvidas sobre se "
    Set $List(begin, *+1) = "Pensando mais a longo prazo, "
    Set $List(begin, *+1) = "O que temos que ter sempre em mente é que "
    Set $List(begin, *+1) = "Ainda assim, existem dúvidas a respeito de como "
    Set $List(begin, *+1) = "Gostaria de enfatizar que "
    Set $List(begin, *+1) = "Todavia, "
    Set $List(begin, *+1) = "A nível organizacional, "
    Set $List(begin, *+1) = "O empenho em analisar "
    Set $List(begin, *+1) = "Percebemos, cada vez mais, que "
    Set $List(begin, *+1) = "No mundo atual, "
    Set $List(begin, *+1) = "É importante questionar o quanto "
    Set $List(begin, *+1) = "Neste sentido, "
    Set $List(begin, *+1) = "Evidentemente, "
    Set $List(begin, *+1) = "Por conseguinte, "
    Set $List(begin, *+1) = "É claro que "
    Set $List(begin, *+1) = "Podemos já vislumbrar o modo pelo qual "
    Set $List(begin, *+1) = "Desta maneira, "
    Set $List(begin, *+1) = "O cuidado em identificar pontos críticos n"
    Set $List(begin, *+1) = "A certificação de metodologias que nos auxiliam a lidar com "
    
    Set $List(middle, *+1) = "a execução dos pontos do programa "
    Set $List(middle, *+1) = "a complexidade dos estudos efetuados "
    Set $List(middle, *+1) = "a contínua expansão de nossa atividade "
    Set $List(middle, *+1) = "a estrutura atual da organização "
    Set $List(middle, *+1) = "o novo modelo estrutural aqui preconizado "
    Set $List(middle, *+1) = "o desenvolvimento contínuo de distintas formas de atuação "
    Set $List(middle, *+1) = "a constante divulgação das informações "
    Set $List(middle, *+1) = "a consolidação das estruturas "
    Set $List(middle, *+1) = "a consulta aos diversos militantes "
    Set $List(middle, *+1) = "o início da atividade geral de formação de atitudes "
    Set $List(middle, *+1) = "o desafiador cenário globalizado "
    Set $List(middle, *+1) = "a mobilidade dos capitais internacionais "
    Set $List(middle, *+1) = "o fenômeno da Internet "
    Set $List(middle, *+1) = "a hegemonia do ambiente político "
    Set $List(middle, *+1) = "a expansão dos mercados mundiais "
    Set $List(middle, *+1) = "o aumento do diálogo entre os diferentes setores produtivos "
    Set $List(middle, *+1) = "a crescente influência da mídia "
    Set $List(middle, *+1) = "a necessidade de renovação processual "
    Set $List(middle, *+1) = "a competitividade nas transações comerciais "
    Set $List(middle, *+1) = "o surgimento do comércio virtual "
    Set $List(middle, *+1) = "a revolução dos costumes "
    Set $List(middle, *+1) = "o acompanhamento das preferências de consumo "
    Set $List(middle, *+1) = "o comprometimento entre as equipes "
    Set $List(middle, *+1) = "a determinação clara de objetivos "
    Set $List(middle, *+1) = "a adoção de políticas descentralizadoras "
    Set $List(middle, *+1) = "a valorização de fatores subjetivos "
    Set $List(middle, *+1) = "a percepção das dificuldades "
    Set $List(middle, *+1) = "o entendimento das metas propostas "
    Set $List(middle, *+1) = "o consenso sobre a necessidade de qualificação "
    Set $List(middle, *+1) = "o julgamento imparcial das eventualidades "

    Set $List(middle2, *+1) = "nos obriga à análise "
    Set $List(middle2, *+1) = "cumpre um papel essencial na formulação "
    Set $List(middle2, *+1) = "exige a precisão e a definição "
    Set $List(middle2, *+1) = "auxilia a preparação e a composição "
    Set $List(middle2, *+1) = "garante a contribuição de um grupo importante na determinação "
    Set $List(middle2, *+1) = "assume importantes posições no estabelecimento "
    Set $List(middle2, *+1) = "facilita a criação "
    Set $List(middle2, *+1) = "obstaculiza a apreciação da importância "
    Set $List(middle2, *+1) = "oferece uma interessante oportunidade para verificação "
    Set $List(middle2, *+1) = "acarreta um processo de reformulação e modernização "
    Set $List(middle2, *+1) = "pode nos levar a considerar a reestruturação "
    Set $List(middle2, *+1) = "representa uma abertura para a melhoria "
    Set $List(middle2, *+1) = "ainda não demonstrou convincentemente que vai participar na mudança "
    Set $List(middle2, *+1) = "talvez venha a ressaltar a relatividade "
    Set $List(middle2, *+1) = "prepara-nos para enfrentar situações atípicas decorrentes "
    Set $List(middle2, *+1) = "maximiza as possibilidades por conta "
    Set $List(middle2, *+1) = "desafia a capacidade de equalização "
    Set $List(middle2, *+1) = "agrega valor ao estabelecimento "
    Set $List(middle2, *+1) = "é uma das consequências "
    Set $List(middle2, *+1) = "promove a alavancagem "
    Set $List(middle2, *+1) = "não pode mais se dissociar "
    Set $List(middle2, *+1) = "possibilita uma melhor visão global "
    Set $List(middle2, *+1) = "estimula a padronização "
    Set $List(middle2, *+1) = "aponta para a melhoria "
    Set $List(middle2, *+1) = "faz parte de um processo de gerenciamento "
    Set $List(middle2, *+1) = "causa impacto indireto na reavaliação "
    Set $List(middle2, *+1) = "apresenta tendências no sentido de aprovar a manutenção "
    Set $List(middle2, *+1) = "estende o alcance e a importância "
    Set $List(middle2, *+1) = "deve passar por modificações independentemente "
    Set $List(middle2, *+1) = "afeta positivamente a correta previsão "
    
    Set $List( TheEnd, *+1) = "das condições financeiras e administrativas exigidas."
    Set $List( TheEnd, *+1) = "das diretrizes de desenvolvimento para o futuro."
    Set $List( TheEnd, *+1) = "do sistema de participação geral."
    Set $List( TheEnd, *+1) = "das posturas dos órgãos dirigentes com relação às suas atribuições."
    Set $List( TheEnd, *+1) = "das novas proposições."
    Set $List( TheEnd, *+1) = "das direções preferenciais no sentido do progresso."
    Set $List( TheEnd, *+1) = "do sistema de formação de quadros que corresponde às necessidades."
    Set $List( TheEnd, *+1) = "das condições inegavelmente apropriadas."
    Set $List( TheEnd, *+1) = "dos índices pretendidos."
    Set $List( TheEnd, *+1) = "das formas de ação."
    Set $List( TheEnd, *+1) = "dos paradigmas corporativos."
    Set $List( TheEnd, *+1) = "dos relacionamentos verticais entre as hierarquias."
    Set $List( TheEnd, *+1) = "do processo de comunicação como um todo."
    Set $List( TheEnd, *+1) = "dos métodos utilizados na avaliação de resultados."
    Set $List( TheEnd, *+1) = "de todos os recursos funcionais envolvidos."
    Set $List( TheEnd, *+1) = "dos níveis de motivação departamental."
    Set $List( TheEnd, *+1) = "da gestão inovadora da qual fazemos parte."
    Set $List( TheEnd, *+1) = "dos modos de operação convencionais."
    Set $List( TheEnd, *+1) = "de alternativas às soluções ortodoxas."
    Set $List( TheEnd, *+1) = "dos procedimentos normalmente adotados."
    Set $List( TheEnd, *+1) = "dos conhecimentos estratégicos para atingir a excelência."
    Set $List( TheEnd, *+1) = "do fluxo de informações."
    Set $List( TheEnd, *+1) = "do levantamento das variáveis envolvidas."
    Set $List( TheEnd, *+1) = "das diversas correntes de pensamento."
    Set $List( TheEnd, *+1) = "do impacto na agilidade decisória."
    Set $List( TheEnd, *+1) = "das regras de conduta normativas."
    Set $List( TheEnd, *+1) = "do orçamento setorial."
    Set $List( TheEnd, *+1) = "do retorno esperado a longo prazo."
    Set $List( TheEnd, *+1) = "do investimento em reciclagem técnica."
    Set $List( TheEnd, *+1) = "do remanejamento dos quadros funcionais."
    
	For k=1:1:pParagraphCount {
		S paragraph = $ListGet(begin,$Random($ListLength(begin)) + 1)
		S paragraph = paragraph _ $ListGet(middle,$Random($ListLength(middle)) + 1)
		S paragraph = paragraph _ $ListGet(middle2,$Random($ListLength(middle2)) + 1)
		S paragraph = paragraph _ $ListGet(TheEnd,$Random($ListLength(TheEnd)) + 1)
		Set $List(paragraphs,*+1) = paragraph
	}
	
	K begin, TheEnd, middle, middle2
	Quit $ListToString($Get(paragraphs), pSeparator)
]]></Implementation>
</Method>
</Class>


<Class name="cosFaker.Name">
<Super>%RegisteredObject</Super>
<TimeChanged>64033,48840.651029</TimeChanged>
<TimeCreated>64015,30897.267344</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
function validarCPF(cpf) {  
         
    // Valida 1o digito 
    add = 0;    
    for (i=0; i < 9; i ++)       
        add += parseInt(cpf.charAt(i)) * (10 - i);  
        rev = 11 - (add % 11);  
        if (rev == 10 || rev == 11)     
            rev = 0;    
        if (rev != parseInt(cpf.charAt(9)))     
            return false;       
    // Valida 2o digito 
    add = 0;    
    for (i = 0; i < 10; i ++)        
        add += parseInt(cpf.charAt(i)) * (11 - i);  
    rev = 11 - (add % 11);  
    if (rev == 10 || rev == 11) 
        rev = 0;    
    if (rev != parseInt(cpf.charAt(10)))
        return false;       
    return true;   
}

*/
]]></Content>
</UDLText>

<Method name="FirstName">
<Description>
Generate a First Name
Female Gender = 1
Male Gender = 1</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pGender:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pGender="" pGender = ($Random(2) + 1)
	
	Set name = ##class(cosFaker.Data.PtBr).FemaleFirstName()
	If pGender = 2 {
		Set name = ##class(cosFaker.Data.PtBr).MaleFirstName()
	} 
	
	Quit name
]]></Implementation>
</Method>

<Method name="LastName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Quit ##class(cosFaker.Data.PtBr).LastName()
]]></Implementation>
</Method>

<Method name="FullName">
<ClassMethod>1</ClassMethod>
<FormalSpec>pGender:%Integer=""</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	Set:pGender="" pGender = ($Random(2) + 1)
	
	Set firstname = ##class(cosFaker.Data.PtBr).FemaleFirstName()
	If pGender = 2 {
		Set firstname = ##class(cosFaker.Data.PtBr).MaleFirstName()
	} 
	
	S rand = $R(3) + 1,lastname = ""
	F k=1:1:rand {
		S:k>1 lastname = lastname _ " "
		S lastname = lastname _ ##class(cosFaker.Data.PtBr).LastName()
	}
	
	Quit firstname _ " " _ lastname
]]></Implementation>
</Method>

<Method name="Suffix">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[	Q ##class(cosFaker.Data.PtBr).PersonSuffix()
]]></Implementation>
</Method>

<Method name="%OnNew">
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<ServerOnly>1</ServerOnly>
<Implementation><![CDATA[
	Do ..Initializer()
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="Initializer">
<Private>1</Private>
</Method>
</Class>




<Project name="pierogi_system" LastModified="2017-02-13 16:33:28.221458">
  <Items>
    <ProjectItem name="Pierogi" type="PKG"></ProjectItem>
    <ProjectItem name="PierogiTests" type="PKG"></ProjectItem>
    <ProjectItem name="PierogiTests.Pierogi" type="CLS"></ProjectItem>
    <ProjectItem name="SamplePrj" type="PKG"></ProjectItem>
    <ProjectItem name="SampleTest.PierogiTest01" type="CLS"></ProjectItem>
    <ProjectItem name="SampleTest.PierogiTest02" type="CLS"></ProjectItem>
    <ProjectItem name="cosFaker" type="PKG"></ProjectItem>
    <ProjectItem name="SampleTest" type="PKG"></ProjectItem>
  </Items>
</Project>
</Export>
